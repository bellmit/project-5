<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://www.springframework.org/tags" prefix="spring"%>
<%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ page session="false"%>
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags"%>
<head>
<title>
	<c:choose>
		<c:when test="${type ne 'Create'}">
			<c:choose>
				<c:when test="${InventoryShipment.status eq 'SHPT_DRAFT' || InventoryShipment.status eq 'SHPT_AWAIT_PLAN' || InventoryShipment.status eq 'SHPT_PLANNING'}">
					<spring:message code='inventoryShipment.inventoryShipment' />: ${InventoryShipment.name} - DRS		
				</c:when>
			<c:otherwise>
				<spring:message code='inventoryShipment.inventoryPurchaseOrder' />: ${InventoryShipment.name} - DRS					
			</c:otherwise>
			</c:choose>
		</c:when>
		<c:otherwise>			
			<spring:message code='inventoryShipment.createInventoryShipment' />	- DRS				
		</c:otherwise>
	</c:choose>
</title>
<link href="<c:url value="/resources/css/newstyle.css"/>" type="text/css" rel="stylesheet">
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/css/select2.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/js/select2.min.js"></script>		
<script>

$(document).ready(function() {
    $("body").tooltip({ selector: '[data-toggle=tooltip]' });
});
		
	function onSubmit(){	
		switch(document.pressed){	
		case 'saveDraft':
		 	document.InventoryShipment.action = "${pageContext.request.contextPath}/InventoryShipments/saveDraft";		   
			break;	
		case 'updateDraft':
			document.InventoryShipment.action ="${pageContext.request.contextPath}/InventoryShipments/updateDraft";
			break;
		case 'update':
			document.InventoryShipment.action ="${pageContext.request.contextPath}/InventoryShipments/update";
			break;
		default:		
		}		
		return true;  
	}

	var app = angular.module('inventoryShipment', []);
	app.controller('inventoryShipmentCtrl', function($scope) {
		
		$('[data-toggle="tooltip"]').tooltip();
	  	
		$('#expectedExportDate,#fcaDeliveryDate,#boxesNeedRepackaging').attr('readonly', true);
		
		$scope.mixedContentBoxCartonCountFirst = 1;
		$scope.mixedContentBoxCartonCountOther = 0;			
		$scope.isDrsUser = ${isDrsUser};
		$scope.isSupplier = ${isSupplier};
				
		$scope.addMixedContentBox = function(){
			$scope.mixedContentBoxes.push([{id:0,boxNum:0,mixedBoxLineSeq:1,requireRepackaging:false,cartonDimensionCm1:null,cartonDimensionCm2:null,cartonDimensionCm3:null,cartonCounts:null,quantity:0,amountUntaxed:0,cartonNumberStart:0,cartonNumberEnd:0,isGUIInvoiceIsRequired:false,guifileName:null}]);
			$scope.assignMixedContentBoxNumber();
			$scope.calculateTotalCartonCount();
			$scope.isAtLeastOneSKU();
		};
		
		$scope.removeMixedContentBox = function(item){
					
			var idx = $scope.mixedContentBoxes.indexOf(item);
			$scope.mixedContentBoxes.splice(idx,1);
			$scope.assignMixedContentBoxNumber();
			$scope.calculateTotalCartonCount();
			$scope.calculateTotalQuantity();
			$scope.subtractAmount();
			$scope.calculateRepackgingFee();
			$scope.isAtLeastOneSKU();
				
		};
		
		$scope.addLineItem = function(){
			$scope.lineItems.push({id:0 ,boxNum:$scope.lineItems.length+1,mixedBoxLineSeq:0,requireRepackaging:false,cartonCounts:null,quantity:0,amountUntaxed:0,cartonNumberStart:0,cartonNumberEnd:0,isGUIInvoiceIsRequired:false,isGUIInvoiceEnable:false,guifileName:null});
			$scope.assignMixedContentBoxNumber();
			$scope.isAtLeastOneSKU();			 
		};
		 	 		
		$scope.addMixedContentBoxLineItem = function(mixedContentBox){			
			
			$scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)].push({id:0,boxNum:0,mixedBoxLineSeq:mixedContentBox.length+1,requireRepackaging:false,cartonDimensionCm1:null,cartonDimensionCm2:null,cartonDimensionCm3:null,cartonCounts:null,quantity:0,amountUntaxed:0,cartonNumberStart:0,cartonNumberEnd:0,isGUIInvoiceIsRequired:false,isGUIInvoiceEnable:false,guifileName:null});
			$scope.assignMixedContentBoxNumber();
			$scope.assignRequireRepackaging(mixedContentBox);
			$scope.assignCartonNumber(mixedContentBox);
			$scope.assignCartonDimension(mixedContentBox);
			$scope.assignPerCartonGrossWeightKg(mixedContentBox);
			$scope.isAtLeastOneSKU();
		};
				
		$scope.removeLineItem = function(item){			 	
						 		     
			var idx = $scope.lineItems.indexOf(item);	 				 
			$scope.lineItems.splice(idx,1);
			$scope.assignUnMixedContentBoxNumber();
			$scope.assignMixedContentBoxNumber();
			$scope.calculateTotalCartonCount();
			$scope.calculateTotalQuantity();
			$scope.subtractAmount();
			$scope.calculateRepackgingFee();
			$scope.isAtLeastOneSKU();
			$scope.verifySKUDuplicateForUnMixedBox();
			$scope.verifyFCAprice();
			 				 
		};
		
		$scope.removeMixedContentBoxLineItem = function(mixedContentBox,item){
			
			var idx = $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)].indexOf(item);
			$scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)].splice(idx,1);	
			$scope.assignMixedContentBoxLineSeq(mixedContentBox,item);
			$scope.calculateTotalCartonCount();
			$scope.calculateTotalQuantity();
			$scope.subtractAmount();
			$scope.calculateRepackgingFee();
			$scope.isAtLeastOneSKU();
			$scope.verifySKUDuplicateForMixedBox(mixedContentBox);
			$scope.verifyFCAprice();
			
		};
		
		$scope.calculateRepackgingFee = function() {		        
												
			var totalUnmixedContentBoxCartonCounts = 0;
			for(var i = 0; i < $scope.lineItems.length;i++){								
				if($scope.lineItems[i].requireRepackaging == true)totalUnmixedContentBoxCartonCounts += Number($scope.lineItems[i].cartonCounts);
			}
						
			var totalMixedContentBoxCartonCounts = 0;			
			for(var i = 0; i < $scope.mixedContentBoxes.length;i++){								
				if($scope.mixedContentBoxes[i].length > 0){				
					if($scope.mixedContentBoxes[i][0].requireRepackaging == true)totalMixedContentBoxCartonCounts += Number($scope.mixedContentBoxes[i][0].cartonCounts);
				}			
			}
									
			$scope.boxesNeedRepackaging = totalUnmixedContentBoxCartonCounts + totalMixedContentBoxCartonCounts;						
			$scope.repackagingFee = $scope.boxesNeedRepackaging*100;
						
		};
				
		$scope.removePONumber = function() {
			
			if($scope.requiredPO==false)$scope.PONumber = null;
			
		};
		
		$scope.assignUnMixedContentBoxNumber = function() {
			
			for(var i = 0; i < $scope.lineItems.length;i++){
				$scope.lineItems[i].boxNum = i+1;
			}
			
		};
				
		$scope.assignMixedContentBoxNumber = function() {
						
			var boxNumStart = $scope.lineItems.length;
			
			for(var i = 0; i < $scope.mixedContentBoxes.length;i++){				
				for(var j = 0; j < $scope.mixedContentBoxes[i].length;j++){										
					$scope.mixedContentBoxes[i][j].boxNum = boxNumStart+1;
				}
				boxNumStart++;
			}
											
		};
		
		$scope.assignMixedContentBoxLineSeq = function(mixedContentBox,item) {
									
			var mixedContentBoxLineItems = $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)];
			for(var i = 0; i < mixedContentBoxLineItems.length;i++){
				$scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][i].mixedBoxLineSeq = i+1;
			}
						
		};
								
		$scope.assignRequireRepackaging = function(mixedContentBox){
			
			for(var i = 0; i < $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)].length;i++){
				$scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][i].requireRepackaging = $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][0].requireRepackaging;
			}
			$scope.calculateRepackgingFee();
		};
		
		
		$scope.assignCartonNumber = function(mixedContentBox){
			
			for(var i = 0; i < $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)].length;i++){
				$scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][i].cartonNumberStart = $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][0].cartonNumberStart;
				$scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][i].cartonNumberEnd = $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][0].cartonNumberEnd;
			}

		};
				
		$scope.assignCartonDimension = function(mixedContentBox){
						
			for(var i = 0; i < $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)].length;i++){				
				$scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][i].cartonDimensionCm1 = $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][0].cartonDimensionCm1;
				$scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][i].cartonDimensionCm2 = $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][0].cartonDimensionCm2;
				$scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][i].cartonDimensionCm3 = $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][0].cartonDimensionCm3;								
			}
													
		};
			
		$scope.assignPerCartonGrossWeightKg = function(mixedContentBox){
			
			for(var i = 0; i < $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)].length;i++){			
				$scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][i].perCartonGrossWeightKg = $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][0].perCartonGrossWeightKg;
			}	
						
		};
				
		$scope.calculateQuantity = function(scope) {		        
			var quantity = Number(scope.item.perCartonUnits)*Number(scope.item.cartonCounts) 	 			 
			scope.item.quantity = isNaN(quantity) ? 0 : quantity;			 
			scope.calculateAmount(scope);
			scope.calculateTotalCartonCount();
			scope.calculateTotalQuantity();
			scope.calculateSubtotal();		 			 			
			scope.calculateTaxAmount();
			scope.calculateTotalAmount();
			scope.calculateRepackgingFee();
		 };
	
		 $scope.calculateMixedContentBoxQuantity = function(scope) {
			 var quantity = Number(scope.mixedContentBoxItem.perCartonUnits)*1; 
			 scope.mixedContentBoxItem.quantity = isNaN(quantity) ? 0 : quantity;
			 scope.calculateMixedContentBoxAmount(scope)
			 scope.calculateTotalCartonCount();
			 scope.calculateTotalQuantity();			 		 
		 };
			 			 
		 $scope.calculateAmount = function(scope){				
			var amount = Number(scope.item.quantity)*Number(scope.item.unitAmount);			 
			scope.item.amountUntaxed = isNaN(amount) ? 0 : Math.round(amount * Math.pow(10, 6)) / Math.pow(10, 6);			 
			scope.calculateSubtotal();	 	
			scope.calculateTaxAmount();
			scope.calculateTotalAmount();
			$scope.verifyFCAprice();
		 };
		 	 
		 $scope.calculateMixedContentBoxAmount = function(scope){				
			var amount = Number(scope.mixedContentBoxItem.quantity)*Number(scope.mixedContentBoxItem.unitAmount);			 
			scope.mixedContentBoxItem.amountUntaxed = isNaN(amount) ? 0 : Math.round(amount * Math.pow(10, 6)) / Math.pow(10, 6);			 
			scope.calculateSubtotal();	 	
			scope.calculateTaxAmount();
			scope.calculateTotalAmount();
			$scope.verifyFCAprice();
		 };
		 		 
		 $scope.calculateSubtotal = function(){			 
						
			var unmixedContentBoxSubtotal = 0;
			for(var i = 0; i < $scope.lineItems.length;i++){		
				unmixedContentBoxSubtotal += Number($scope.lineItems[i].amountUntaxed);
			}
										
			var mixedContentBoxSubtotal = 0;						
			for(var i = 0; i < $scope.mixedContentBoxes.length;i++){								
				for(var j = 0; j < $scope.mixedContentBoxes[i].length;j++){
					mixedContentBoxSubtotal += Number($scope.mixedContentBoxes[i][j].amountUntaxed);
				}											
			}
			
			var subtotal = unmixedContentBoxSubtotal + mixedContentBoxSubtotal;
			$scope.subtotal = Math.round(subtotal);
											 
		 };
		 
		 $scope.calculateTaxAmount = function(){			 			 
			var amountTax = (Number($scope.subtotal)*Number($scope.salesTaxPercentage)) / 100;														
			$scope.taxAmount = isNaN(amountTax) ? 0 : Math.round(amountTax);				 			 
		 };
	
		 $scope.calculateTotalCartonCount = function (){
			 
			var totalUnmixedContentBoxCartonCounts = 0;
			for(var i = 0; i < $scope.lineItems.length;i++){								
				totalUnmixedContentBoxCartonCounts += Number($scope.lineItems[i].cartonCounts);									
			}
				
			var totalMixedContentBoxCartonCounts = 0;
			for(var i = 0; i < $scope.mixedContentBoxes.length;i++){								
				if($scope.mixedContentBoxes[i].length > 0){
					totalMixedContentBoxCartonCounts += 1;
				}							
			}
	
			$scope.totalCartonCount = totalUnmixedContentBoxCartonCounts + totalMixedContentBoxCartonCounts;
									 
		 };
		 		 
		 $scope.calculateTotalQuantity = function(){			
						 
			var totalUnmixedContentBoxQuantity = 0;
			for(var i = 0; i < $scope.lineItems.length;i++){	
				var unmixedContentBoxQuantity = Number($scope.lineItems[i].perCartonUnits)*Number($scope.lineItems[i].cartonCounts);
				unmixedContentBoxQuantity = isNaN(unmixedContentBoxQuantity) ? 0 : Number($scope.lineItems[i].perCartonUnits)*Number($scope.lineItems[i].cartonCounts);
				totalUnmixedContentBoxQuantity += unmixedContentBoxQuantity;
			}
									
			var totalMixedContentBoxQuantity = 0;			
			for(var i = 0; i < $scope.mixedContentBoxes.length;i++){								
				for(var j = 0; j < $scope.mixedContentBoxes[i].length;j++){
					var mixedContentBoxQuantity = Number($scope.mixedContentBoxes[i][j].perCartonUnits)*1;
					mixedContentBoxQuantity = isNaN(mixedContentBoxQuantity) ? 0 : Number($scope.mixedContentBoxes[i][j].perCartonUnits)*1;
					totalMixedContentBoxQuantity += mixedContentBoxQuantity;
				}											
			}
			
			$scope.totalQuantity = totalUnmixedContentBoxQuantity + totalMixedContentBoxQuantity;
											 
		 };
		 		 
		 $scope.calculateTotalAmount = function(){			 
			var totalAmount = Number($scope.subtotal) + Number($scope.taxAmount);			 
			$scope.totalAmount = Math.round(totalAmount);			 			 
		 };
		 
		 $scope.changeSalesTaxPercentage = function(){			 
			$scope.calculateTaxAmount();
			$scope.calculateTotalAmount();			 
		 };
		 		 
		 $scope.subtractAmount = function(){	 
		 	$scope.calculateSubtotal();
		 	$scope.calculateTaxAmount();
		 	$scope.calculateTotalAmount();			 
		 };
				 
		 $scope.verifySKUForUnMixedBox = function(item){
			$scope.verifySKUDuplicateForUnMixedBox();
			$scope.verifyFCAprice();
			$scope.isGUIInvoiceIsRequiredForUnMixedBox(item);
		 };
		 
		 $scope.verifySKUForMixedBox = function(item,mixedContentBox){
			$scope.verifySKUDuplicateForMixedBox(mixedContentBox);
			$scope.verifyFCAprice();
			$scope.isGUIInvoiceIsRequiredForMixedBox(item);
		 };
		
		 $scope.isAtLeastOneSKU = function (){

			var skuCount = 0; 
			skuCount = $scope.lineItems.length			
			for(var i = 0; i < $scope.mixedContentBoxes.length;i++){												
				skuCount += $scope.mixedContentBoxes[i].length;
			}

			skuCount < 1 ?$scope.atLeastOneSKUWarning = false:$scope.atLeastOneSKUWarning = true;
			skuCount==0?$scope.noSKU = false:$scope.noSKU = true;
			
		 };
		 		 
		 $scope.verifySKUDuplicateForUnMixedBox = function(){
		 
			var sorted, i, j;
			var currentSKUs = [];			 
			sorted = $scope.lineItems.concat(); 			 			 
			for(i = 0; i < $scope.lineItems.length;i++){				 
				currentSKUs.push($scope.lineItems[i].skuCode); 				 
			}			 						 
			var duplicatedIndex = []; 
			var noneDuplicatedIndex  = [];	 						 
			for(i=0; i < currentSKUs.length;i++){				
				for(j=0; j < currentSKUs.length;j++){					
					if (i != j) {						 
						if( typeof currentSKUs[i] !== 'undefined' && typeof currentSKUs[j] !== 'undefined'){						 
							if(currentSKUs[i] == currentSKUs[j]){							 
								if(duplicatedIndex.indexOf(i) === -1) duplicatedIndex.push(i);							 
							}else{							 
								if(noneDuplicatedIndex.indexOf(i) === -1) noneDuplicatedIndex.push(i);						 
							}					 
						}						 
				    }										
				}																				
			}			
			var k, m, n;			
			for(k = 0 ; k < noneDuplicatedIndex.length; k++){				
				sorted[noneDuplicatedIndex[k]].isDuplicate = false;				
			}			
			for(m = 0 ; m < duplicatedIndex.length; m++){				
				sorted[duplicatedIndex[m]].isDuplicate = true;										
			}			
			if(duplicatedIndex.length == 0){				
				for(n = 0; n < currentSKUs.length;n++){
					sorted[n].isDuplicate = false;																			
				}				
				$scope.duplicated = false;				
			}else{								 
				$scope.duplicated = true;				
			}
				
		 };	 
		 
		 $scope.verifySKUDuplicateForMixedBox = function(mixedContentBox){
		 
			 var sorted, i, j;
			 var currentSKUs = [];
			 sorted = $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)].concat();
			 for(i = 0; i < $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)].length;i++){				 
				currentSKUs.push($scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][i].skuCode); 				 
			 }
			 var duplicatedIndex = []; 
			 var noneDuplicatedIndex  = [];
			 for(i=0; i < currentSKUs.length;i++){				
				for(j=0; j < currentSKUs.length;j++){					
					if (i != j) {						 
						if( typeof currentSKUs[i] !== 'undefined' && typeof currentSKUs[j] !== 'undefined'){						 
							if(currentSKUs[i] == currentSKUs[j]){							 
								if(duplicatedIndex.indexOf(i) === -1) duplicatedIndex.push(i);							 
							}else{							 
								if(noneDuplicatedIndex.indexOf(i) === -1) noneDuplicatedIndex.push(i);						 
							}					 
						}						 
				   }										
				}																				
			 }
			 var k, m, n;			
			 for(k = 0 ; k < noneDuplicatedIndex.length; k++){				
				sorted[noneDuplicatedIndex[k]].isDuplicate = false;				
			 }			
			 for(m = 0 ; m < duplicatedIndex.length; m++){				
				sorted[duplicatedIndex[m]].isDuplicate = true;										
			 }			
			 if(duplicatedIndex.length == 0){				
			 	for(n = 0; n < currentSKUs.length;n++){
					sorted[n].isDuplicate = false;																			
				}				
				$scope.duplicated = false;				
			 }else{								 
				$scope.duplicated = true;				
			 }
			 
		 };
		 
		 $scope.verifyFCAprice = function (){
			 
			var SKUtoFCAprice = []; 
		 	for(i = 0; i < $scope.lineItems.length;i++){	
		 		SKUtoFCAprice.push({skuCode:$scope.lineItems[i].skuCode,FCAprice:Number($scope.lineItems[i].unitAmount)});
		 	}			 
		 	for(var j = 0; j < $scope.mixedContentBoxes.length;j++){								
				for(var k = 0; k < $scope.mixedContentBoxes[j].length;k++){			
					SKUtoFCAprice.push({skuCode:$scope.mixedContentBoxes[j][k].skuCode,FCAprice:Number($scope.mixedContentBoxes[j][k].unitAmount)});
				}											
			} 
						 			 	
			for(var m = 0; m < SKUtoFCAprice.length;m++){
										
				for(var n = 0; n < SKUtoFCAprice.length;n++){
															
					if (m != n) {
																	
						if(typeof SKUtoFCAprice[m].skuCode !== 'undefined' && typeof SKUtoFCAprice[n].skuCode !== 'undefined' && !isNaN(SKUtoFCAprice[m].FCAprice) && !isNaN(SKUtoFCAprice[n].FCAprice)){
														
							if(SKUtoFCAprice[m].skuCode == SKUtoFCAprice[n].skuCode && SKUtoFCAprice[m].FCAprice != SKUtoFCAprice[n].FCAprice){	
								$scope.FCAPriceNoneEqual = true;
								break;						
							}else if(SKUtoFCAprice[m].skuCode == SKUtoFCAprice[n].skuCode && SKUtoFCAprice[m].FCAprice == SKUtoFCAprice[n].FCAprice){
								$scope.FCAPriceNoneEqual = false;														
							}
						
						}
						
					}
					
										
				}					
				
			} 
		 				 
		 };
		 		 						
		 function emptyList(id) {

		    var element =  document.getElementById(id);
		    if(	typeof(element) != 'undefined' && element != null ){
		       if(typeof(element.options) != 'undefined' && element.options != null){
		        element.options.length = 0;
		       }
		    }
		 }
		 
		 function getShippingMethodList(){			 
			 var destinationCountry = $("#destinationCountry").val();
			 var ajaxUrl = '${pageContext.request.contextPath}/InventoryShipments/getShippingMethodList/';			    
			 var shippingMethodList = null;
			 $.ajax({
				type : 'get',
				url : ajaxUrl,
				contentType : "application/json; charset=utf-8",
				data : {destinationCountry : destinationCountry},
				dataType : "json",
				success : function(data) {								
					emptyList("shippingMethod");								
					var springMessage = new Array();
					springMessage["EXPRESS"] = '<spring:message code="EXPRESS" />';
					springMessage["AIR_CARGO"] = '<spring:message code="AIR_CARGO" />';
					springMessage["SEA_FREIGHT"] = '<spring:message code="SEA_FREIGHT" />';								
					shippingMethodList = data;														
					var selectShippingMethod = document.getElementById("shippingMethod");
					var optShippingMethod = document.createElement("option");			    			    				    				    			    			    
					optShippingMethod.value = "";
					optShippingMethod.textContent = "--- Select ---";
					selectShippingMethod.appendChild(optShippingMethod);							    						
					for(var shippingMethod in shippingMethodList){							    
						if (shippingMethodList.hasOwnProperty(shippingMethod)) {							    							    	
							optShippingMethod = document.createElement("option");
							optShippingMethod.value = shippingMethodList[shippingMethod];
							optShippingMethod.textContent = springMessage[shippingMethodList[shippingMethod]];
							selectShippingMethod.appendChild(optShippingMethod);							    	
						}							    	
					}									
					$("#shippingMethod").val($scope.shippingMethod);							    
				}											
			});
		}
		 
		function getFCADeliveryLocations(){
			var ajaxUrl = '${pageContext.request.contextPath}/InventoryShipments/getFcaDeliveryLocationIdToLocationMap/';
			var FCADeliveryLocations = null; 				
			$.ajax({
				type : 'get',
				url : ajaxUrl,
				contentType : "application/json; charset=utf-8",
				dataType : "json",
				success : function(data) {
					emptyList("fcaDeliveryLocation")						
					FCADeliveryLocations = data;					
					var selectFCADeliveryLocation = document.getElementById("fcaDeliveryLocation");
					var optFCADeliveryLocation = document.createElement("option");			    			    				    				    			    			    
					optFCADeliveryLocation.value = "";
					optFCADeliveryLocation.textContent = "--- Select ---";
					if(selectFCADeliveryLocation != null)selectFCADeliveryLocation.appendChild(optFCADeliveryLocation);
					for(var location in FCADeliveryLocations){		
						optFCADeliveryLocation = document.createElement("option");
					    optFCADeliveryLocation.value = location;
					    optFCADeliveryLocation.textContent = FCADeliveryLocations[location];
					    if(selectFCADeliveryLocation != null)selectFCADeliveryLocation.appendChild(optFCADeliveryLocation);
					}							
					$("#fcaDeliveryLocation").val($scope.fcaDeliveryLocationId);											    
				}									
			});				
		 }
		 
		 function getDaysToPrepare(){
			var shippingMethod = $scope.shippingMethod;	
		    if (shippingMethod == null || shippingMethod == "") {
		    	return;
		    }		 					
			if($scope.fcaDeliveryLocationId != 4){
				$("#expectedExportDate").prop( "disabled", false );
			    $("#expectedExportDate").css({"cursor": "default", "background-color": "white"});				    	
			    $('#expectedExportDate').datepicker('destroy');				
				var ajaxUrl = '${pageContext.request.contextPath}/InventoryShipments/getDaysToPrepare/';			
				$.ajax({
					type : 'get',
					url : ajaxUrl,
					contentType : "application/json; charset=utf-8",
					data : { shippingMethod : shippingMethod },
					dataType : "json",
					success : function(data) {			    	
						jQuery("#expectedExportDate").datepicker({
							beforeShow: function() {
								setTimeout(function(){
									$('.ui-datepicker').css('z-index', 200);
					    	    }, 0);
					    	},
					    	dateFormat : 'yy-mm-dd',
					    	minDate: data      
					    });																	
					}				
				});
			}else{
				$("#expectedExportDate").prop( "disabled", false );
				$("#expectedExportDate").css({"cursor": "default", "background-color": "white"});	
				jQuery("#expectedExportDate").datepicker({
					beforeShow: function() {
						setTimeout(function(){
							$('.ui-datepicker').css('z-index', 200);
			    	    }, 0);
			    	},
			    	dateFormat : 'yy-mm-dd'      
			    });
				/*
				$("#fcaDeliveryDate").prop( "disabled", false );
				$("#fcaDeliveryDate").css({"cursor": "default", "background-color": "white"});
				jQuery("#fcaDeliveryDate").datepicker({
					beforeShow: function() {
						setTimeout(function(){
							$('.ui-datepicker').css('z-index', 200);
			    	    }, 0);
			    	},
			    	dateFormat : 'yy-mm-dd'      
			    });*/
			}	 			 
		 }
		 		 
		 $scope.getFCADeliveryLocations = function (){							 				 
			$scope.fcaDeliveryLocationId = "";
			$scope.expectedExportDate = "";
			var ajaxUrl = '${pageContext.request.contextPath}/InventoryShipments/getFcaDeliveryLocationIdToLocationMap/';
			var FCADeliveryLocations = null;
			$.ajax({
				type : 'get',
				url : ajaxUrl,
				dataType : "json",
				success : function(data) {
					emptyList("fcaDeliveryLocation")
					$("#fcaDeliveryDate").val("");						
					FCADeliveryLocations = data;																							
					var selectFCADeliveryLocation = document.getElementById("fcaDeliveryLocation");
				    var optFCADeliveryLocation = document.createElement("option");			    			    				    				    			    			    
				    optFCADeliveryLocation.value = "";
				    optFCADeliveryLocation.textContent = "--- Select ---";
				    selectFCADeliveryLocation.appendChild(optFCADeliveryLocation);					    									    
				    for(var location in FCADeliveryLocations){		
						optFCADeliveryLocation = document.createElement("option");
				    	optFCADeliveryLocation.value = location;
				    	optFCADeliveryLocation.textContent = FCADeliveryLocations[location];
				    	selectFCADeliveryLocation.appendChild(optFCADeliveryLocation);					    						
				    }											   					    												
				}									
			});		    
			if(shippingMethod !="" && destinationCountry !=""){						
				$("#expectedExportDate").prop( "disabled", true );			    
			    $("#expectedExportDate").removeAttr("style");
			    $("#expectedExportDate").css({"display": "inline"});			    
			    $('#expectedExportDate').datepicker('destroy');    				    				    
			    $('#fcaDeliveryDate').attr('readonly', true);
			    $("#fcaDeliveryDate").removeAttr("style");
			    $("#fcaDeliveryDate").css({"display": "inline"});  
			    $('#fcaDeliveryDate').datepicker('destroy');			
			}else{
			    $("#expectedExportDate").prop( "disabled", true );			    	
			    $("#expectedExportDate").removeAttr("style");
			    $("#expectedExportDate").css({"display": "inline"});	    	
			    $('#expectedExportDate').datepicker('destroy');
			    $('#expectedExportDate').val("");			    	
			    $("#fcaDeliveryDate").val("");
			    $('#fcaDeliveryDate').attr('readonly', true);
			    $("#fcaDeliveryDate").datepicker('destroy');			    
			}						 
		 };
		 
		 $scope.getShippingMethodList = function(){
			emptyList("shippingMethod");			 
			$("#expectedExportDate").prop( "disabled", true );			    	
		    $("#expectedExportDate").removeAttr("style");
		    $("#expectedExportDate").css({"display": "inline"});	    	
		    $('#expectedExportDate').datepicker('destroy');
		    $('#expectedExportDate').val("");		    
		    $('#fcaDeliveryDate').attr('readonly', true);
		    $("#fcaDeliveryDate").removeAttr("style");
		    $("#fcaDeliveryDate").css({"display": "inline"});  
		    $('#fcaDeliveryDate').datepicker('destroy');
		    $('#fcaDeliveryDate').val("");		    
			
		    $scope.expectedExportDate = "";			 
			$("#fcaDeliveryDate").val("");			 						 
			var destinationCountry = $("#destinationCountry").val();
			var ajaxUrl = '${pageContext.request.contextPath}/InventoryShipments/getShippingMethodList/';			    
			var shippingMethodList = null;			
			$("#shipping-rates").html("");	 
			$.ajax({
				type : 'get',
				url : ajaxUrl,
				contentType : "application/json; charset=utf-8",
				data : {
					destinationCountry : destinationCountry											
				},
				dataType : "json",
				success : function(data) {												
					var springMessage = new Array();
					springMessage["EXPRESS"] = '<spring:message code="EXPRESS" />';
					springMessage["AIR_CARGO"] = '<spring:message code="AIR_CARGO" />';
					springMessage["SEA_FREIGHT"] = '<spring:message code="SEA_FREIGHT" />';						
					shippingMethodList = data;												
					var selectShippingMethod = document.getElementById("shippingMethod");
					var optShippingMethod = document.createElement("option");			    			    				    				    			    			    
					optShippingMethod.value = "";
					optShippingMethod.textContent = "--- Select ---";
					selectShippingMethod.appendChild(optShippingMethod);					    						
					for(var shippingMethod in shippingMethodList){					    
						if (shippingMethodList.hasOwnProperty(shippingMethod)) {					    							    	
					    	optShippingMethod = document.createElement("option");
					    	optShippingMethod.value = shippingMethodList[shippingMethod];
					    	optShippingMethod.textContent = springMessage[shippingMethodList[shippingMethod]];
					    	selectShippingMethod.appendChild(optShippingMethod);					    	
					    }					    	
					}			
					$("#shippingMethod").val("");					
					$("#shipping-rates").html($scope.shippingRates[destinationCountry]);					    
				}									
			});	 			 
		 };
		 
		 $scope.resetSelectOptions = function (){
			$("#shippingMethod").val("");
		    $('#expectedExportDate').attr('readonly', true);
			$("#expectedExportDate").removeAttr("style");
		    $("#expectedExportDate").css({"display": "inline"});  
		    $('#expectedExportDate').datepicker('destroy');
		    $('#expectedExportDate').val("");
		    $('#fcaDeliveryDate').attr('readonly', true);
			$("#fcaDeliveryDate").removeAttr("style");
		    $("#fcaDeliveryDate").css({"display": "inline"});  
		    $('#fcaDeliveryDate').datepicker('destroy');
		    $('#fcaDeliveryDate').val("");
			 var FCADeliveryLocationId = $("#fcaDeliveryLocation").val();
			 if (FCADeliveryLocationId == 4) {
				 $("#shipping-rates").fadeTo(0, 0);
				 $("#exportDateDesc").fadeTo(0, 0);
			 } else {
				 $("#shipping-rates").fadeTo(200, 1);
				 $("#exportDateDesc").fadeTo(200, 1);
			 }
		 };
		 
		 $scope.getDaysToPrepare = function () {
			getDaysToPrepare();	
		 }
		 		 
		 $scope.getFCADeliveryDate = function (){
			var destinationCountry = $("#destinationCountry").val();
			var shippingMethod = $("#shippingMethod").val();
			var FCADeliveryLocationId = $("#fcaDeliveryLocation").val();
			var expectedExportDate = $("#expectedExportDate").val();
			var ajaxUrl = '${pageContext.request.contextPath}/InventoryShipments/getFcaDeliveryDate/';			    
			var FCADeliveryDate = null;						
			$("#fcaDeliveryDate").val("");			 
			
			if(FCADeliveryLocationId != 4){
				getDaysToPrepare();
				if (expectedExportDate == "") {
					return;
				}
			    $('#fcaDeliveryDate').attr('readonly', true);
				$("#fcaDeliveryDate").removeAttr("style");
			    $("#fcaDeliveryDate").css({"display": "inline"});  
			    $('#fcaDeliveryDate').datepicker('destroy');
				$.ajax({
					type : 'get',
					url : ajaxUrl,
					contentType : "application/json; charset=utf-8",
					data : {
						destinationCountry : destinationCountry,
						shippingMethod : shippingMethod,
						FCADeliveryLocationId : FCADeliveryLocationId,
						expectedExportDate : expectedExportDate						
					},
					dataType : "json",
					success : function(data) {					
						FCADeliveryDate = data;						
						$("#fcaDeliveryDate").val(FCADeliveryDate);						
					}									
				});
						
			} else {
				
				$("#expectedExportDate").prop( "disabled", false );
			    $("#expectedExportDate").css({"cursor": "default", "background-color": "white"});				    	
			    $('#expectedExportDate').datepicker('destroy');			    
			    jQuery("#expectedExportDate").datepicker({
					beforeShow: function() {
						setTimeout(function(){
							$('.ui-datepicker').css('z-index', 200);
			    	    }, 0);
			    	},
			    	dateFormat : 'yy-mm-dd'      
			    });
			    /*$('#fcaDeliveryDate').attr('readonly', false);
			    $("#fcaDeliveryDate").css({"cursor": "default", "background-color": "white"});				    	
			    jQuery("#fcaDeliveryDate").datepicker({
					beforeShow: function() {
						setTimeout(function(){
							$('.ui-datepicker').css('z-index', 200);
			    	    }, 0);
			    	},
			    	dateFormat : 'yy-mm-dd'      
			    });*/
			    $("#fcaDeliveryDate").val(expectedExportDate);
			    
			}
						
		 };
		 
		$scope.isGUIInvoiceIsRequiredForUnMixedBox = function (item){

			var sku = item.skuCode;
			$.ajax({
				type : 'get',
				url : '${pageContext.request.contextPath}/InventoryShipments/isGUIInvoiceIsRequired',
				contentType : "application/json; charset=utf-8",
				data : {
					sku : sku						
				},
				dataType : "json",
				success : function(data) {
					item.isGUIInvoiceEnable = data;
					item.isGUIInvoiceIsRequired = false;
					if(item.isGUIInvoiceEnable == true && $scope.status=="SHPT_PLANNING") item.isGUIInvoiceIsRequired = true;
					$scope.$apply();
				}									
			});							 
		};
		 		 
		$scope.isGUIInvoiceIsRequiredForMixedBox = function (mixedContentBoxItem){			 
			var sku = mixedContentBoxItem.skuCode;
			$.ajax({
				type : 'get',
				url : '${pageContext.request.contextPath}/InventoryShipments/isGUIInvoiceIsRequired',
				contentType : "application/json; charset=utf-8",
				data : {
					sku : sku						
				},
				dataType : "json",
				success : function(data) {					
					mixedContentBoxItem.isGUIInvoiceEnable = data;
					mixedContentBoxItem.isGUIInvoiceIsRequired = false;
					if(mixedContentBoxItem.isGUIInvoiceEnable == true && $scope.status=="SHPT_PLANNING") mixedContentBoxItem.isGUIInvoiceIsRequired = true;
					$scope.$apply();
				}									
			});							 
		};
		
		$scope.uploadGUIInvoiceFile = function (id,item){

			var fileData = $("#GUIInvoiceFile" + id).prop("files")[0];
			var form_data = new FormData();
			form_data.append("file", fileData)
								
			$.ajax({
				url : "${pageContext.request.contextPath}/InventoryShipments/uploadGUIInvoiceFile/" + $scope.name ,
				dataType : 'script',
				cache : false,
				contentType : false,
				processData : false,
				data : form_data,
				type : 'POST',
				success : function(data) {
					var result = JSON.parse(data);
					var idx = $scope.lineItems.indexOf(item);			
					$scope.lineItems[idx].guifileName = fileData['name'];
					$scope.$apply();
				}
			});			
		};
			
		$scope.uploadGUIInvoiceFileInMixedBox = function (id,mixedContentBox,item ){

			var fileData = $("#GUIInvoiceFile" + id).prop("files")[0];
			var form_data = new FormData();
			form_data.append("file", fileData)
								
			$.ajax({
				url : "${pageContext.request.contextPath}/InventoryShipments/uploadGUIInvoiceFile/" + $scope.name,
				dataType : 'script',
				cache : false,
				contentType : false,
				processData : false,
				data : form_data,
				type : 'POST',
				success : function(data) {
					var result = JSON.parse(data);
					var idx = $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)].indexOf(item);	
					$scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][idx].guifileName = fileData['name'];
					$scope.$apply();
				}
			});			
		};
				
		$scope.removeGUIInvoiceFile = function (GUIInvoiceFileName,item){
					
			$.ajax({
				type : 'POST',
				url : '${pageContext.request.contextPath}/InventoryShipments/removeGUIInvoiceFile',
				data : {
					GUIInvoiceFileName : GUIInvoiceFileName											
				},
				success : function(data) {
					var result = JSON.parse(data);
					var idx = $scope.lineItems.indexOf(item);
					$scope.lineItems[idx].guifileName = null;
					$scope.$apply();
				}
								
			});
									
		};
		
		$scope.removeGUIInvoiceFileInMixedBox = function (GUIInvoiceFileName,mixedContentBox,item){
			
			$.ajax({
				type : 'POST',
				url : '${pageContext.request.contextPath}/InventoryShipments/removeGUIInvoiceFile',
				data : {
					GUIInvoiceFileName : GUIInvoiceFileName											
				},
				success : function(data) {
					var result = JSON.parse(data);
					var idx = $scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)].indexOf(item);	
					$scope.mixedContentBoxes[$scope.mixedContentBoxes.indexOf(mixedContentBox)][idx].guifileName = null;
					$scope.$apply();
				}
								
			});
					
		};
				
		var currentURL = document.URL;
		$scope.shippingRate = "";
		$scope.shippingRates = [];
		$scope.shippingRates["US"] = '<spring:message code="inventoryShipment.shippingRatesUS" />';
		$scope.shippingRates["UK"] = '<spring:message code="inventoryShipment.shippingRatesUK" />';
		$scope.shippingRates["CA"] = '<spring:message code="inventoryShipment.shippingRatesCA" />';
		$scope.shippingRates["DE"] = '<spring:message code="inventoryShipment.shippingRatesUK" />';
		$scope.shippingRates["FR"] = '<spring:message code="inventoryShipment.shippingRatesUK" />';
		$scope.shippingRates["EU"] = '<spring:message code="inventoryShipment.shippingRatesUK" />';
		getFCADeliveryLocations();


		if(currentURL.indexOf("edit") > -1){
			$scope.duplicated = false;
			//$scope.atLeastOneSKU = false;
			$scope.FCAPriceNoneEqual = false;
			var InventoryShipmentJson = ${InventoryShipmentJson};

            $scope.name = InventoryShipmentJson.name
			$scope.destinationCountry = InventoryShipmentJson.destinationCountry;						
			$("#shipping-rates").html($scope.shippingRates[$scope.destinationCountry]);
			$scope.shippingMethod = InventoryShipmentJson.shippingMethod;			
			$scope.invoiceNumber = InventoryShipmentJson.invoiceNumber;
			$scope.expectedExportDate = InventoryShipmentJson.expectedExportDate;
			$scope.fcaDeliveryLocationId = InventoryShipmentJson.fcaDeliveryLocationId;						
			getShippingMethodList();
						
			 getDaysToPrepare();
			
			$scope.boxesNeedRepackaging = InventoryShipmentJson.boxesNeedRepackaging;
			$scope.repackagingFee = InventoryShipmentJson.repackagingFee;
			$scope.requiredPO = InventoryShipmentJson.requiredPO;
			$scope.PONumber = InventoryShipmentJson.ponumber;
			
			$scope.lineItems = [];
			$scope.mixedContentBoxes = [];
			var lineItems = InventoryShipmentJson.lineItems;
										
			for(i = 0; i < lineItems.length; i++){				
				if(lineItems[i].mixedBoxLineSeq == 0){
					$scope.lineItems.push(lineItems[i]);
					$scope.isGUIInvoiceIsRequiredForUnMixedBox(lineItems[i]);
				}					
			}
			
			for(i = 0; i < lineItems.length; i++){
				if(lineItems[i].mixedBoxLineSeq != 0){
					if(typeof $scope.mixedContentBoxes[lineItems[i].boxNum] == "undefined") $scope.mixedContentBoxes[lineItems[i].boxNum] = [];				
					$scope.mixedContentBoxes[lineItems[i].boxNum].push(lineItems[i]);
					$scope.isGUIInvoiceIsRequiredForMixedBox(lineItems[i]);				
				}
			}
							
			$scope.mixedContentBoxes = $scope.mixedContentBoxes.filter(function(el) { return el; });
			
			$scope.calculateTotalCartonCount();
			$scope.calculateTotalQuantity();
			$scope.isAtLeastOneSKU();
			$scope.subtotal = InventoryShipmentJson.subtotal;
			$scope.salesTaxPercentage = InventoryShipmentJson.salesTaxPercentage;
			$scope.taxAmount = InventoryShipmentJson.salesTax;
			$scope.totalAmount = InventoryShipmentJson.total;
			$scope.status = InventoryShipmentJson.status;
		}else{
		    $scope.name = "create";
			$scope.duplicated = true;
			$scope.boxesNeedRepackaging = 0;
			$scope.repackagingFee = 0;
			$scope.requiredPO = false;
			$scope.atLeastOneSKUWarning = false;
			$scope.noSKU = true;
			$scope.FCAPriceNoneEqual = false;
			var defaultSalesTaxPercentage = ${defaultSalesTaxPercentage};			
			$scope.lineItems = [{id:0,boxNum:1,mixedBoxLineSeq:0,requireRepackaging:false,cartonCounts:null,quantity:0,amountUntaxed:0,cartonNumberStart:0,cartonNumberEnd:0,isGUIInvoiceIsRequired:false,isGUIInvoiceEnable:false,guifileName:null}];
			$scope.mixedContentBoxes = [];
			$scope.totalCartonCount = 0;
			$scope.totalQuantity = 0;
			$scope.subtotal = 0;
			$scope.salesTaxPercentage = defaultSalesTaxPercentage;
			$scope.taxAmount = 0;
			$scope.totalAmount = 0;
			$scope.status = null;			
		}



	});		
</script>
</head>
<div class="max-width" style="max-width:1600px !important;padding-left:20px;padding-right:20px;" ng-app="inventoryShipment" ng-controller="inventoryShipmentCtrl">
	<div class="container-fluid">		
		<div class="row max-width">
			<div class="col-md-12">
				<div class="page-heading">
					<c:choose>
						<c:when test="${type ne 'Create'}">
							<c:choose>
								<c:when test="${InventoryShipment.status eq 'SHPT_DRAFT' || InventoryShipment.status eq 'SHPT_AWAIT_PLAN' || InventoryShipment.status eq 'SHPT_PLANNING'}">
									<spring:message code='inventoryShipment.inventoryShipment' />		
								</c:when>
								<c:otherwise>
									<spring:message code='inventoryShipment.inventoryPurchaseOrder' />					
								</c:otherwise>
							</c:choose>
						</c:when>
					<c:otherwise>			
						<spring:message code='inventoryShipment.createInventoryShipment' />				
					</c:otherwise>
					</c:choose>
					
	  					<a style="font-size:13pt;" href="<c:url value="/resources/files/HelpIVS.pdf"/>" target="_blank">
							<span class="fas fa-question-circle"></span>	<spring:message code="inventoryShipment.help" />								   						
						</a>  				
	  							
				</div>
				<span class="text-danger"><spring:message code='inventoryShipment.validation' /></span>
				
				
			</div>
		</div>
	<form:form name="InventoryShipment"  modelAttribute="InventoryShipment" onsubmit="return onSubmit();" novalidate="novalidate" enctype="multipart/form-data">
		<div class="row max-width">
			<div class="col-md-7">
				<table class="table table-withoutBorder table-autoWidth">
					<c:choose>
						<c:when test="${type ne 'Create'}">
							<tr>
								<td class="text-right">
									<b><spring:message code='inventoryShipment.inventoryShipmentId' /></b>
								</td>
								<td colspan="2" class="active">
									${InventoryShipment.name}<form:hidden path="name" />
								</td>
							</tr>
						</c:when>
					</c:choose>
							<tr>
								<td class="text-right">
									<b><spring:message code='inventoryShipment.FCADeliveryLocation' /></b><span class="text-danger">*</span>
								</td>
								<c:choose>
									<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
										<td colspan="2" class="active">	
											${FCADeliveryLocationIdToLocationMap[InventoryShipment.fcaDeliveryLocationId]}
											<form:hidden path="fcaDeliveryLocationId" />
										</td>
									</c:when>
									<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
										<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
											<td colspan="2" class="active">	
												${FCADeliveryLocationIdToLocationMap[InventoryShipment.fcaDeliveryLocationId]}
												<form:hidden path="fcaDeliveryLocationId" />
											</td>
										</sec:authorize>
										<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
											<td colspan="2">
												<form:select id="fcaDeliveryLocation" class="form-control" style="display: inline;" path="fcaDeliveryLocationId" 
												ng-model="fcaDeliveryLocationId" ng-change="resetSelectOptions();" required="required">								
												</form:select>
												<div class="text-danger" ng-show="InventoryShipment.fcaDeliveryLocationId.$error.required && InventoryShipment.fcaDeliveryLocationId.$dirty">
      	 											<spring:message code='inventoryShipment.FCADeliveryLocation_req'/>
												</div>
											</td>
										</sec:authorize>
									</c:when>		
									<c:otherwise>
										<td colspan="2">
											<form:select id="fcaDeliveryLocation" class="form-control" style="display: inline;" path="fcaDeliveryLocationId" 
											ng-model="fcaDeliveryLocationId" ng-change="resetSelectOptions();" required="required">								
											</form:select>
											<div class="text-danger" ng-show="InventoryShipment.fcaDeliveryLocationId.$error.required && InventoryShipment.fcaDeliveryLocationId.$dirty">
      	 										<spring:message code='inventoryShipment.FCADeliveryLocation_req'/>
											</div>
										</td>
									</c:otherwise>		
								</c:choose>
							</tr>					
							<tr>
								<td class="text-right">
									<b><spring:message code='inventoryShipment.destination' /></b><span class="text-danger">*</span>
								</td>
								<c:choose>
									<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
									<td colspan="2" class="active">	
										<spring:message code="${InventoryShipment.destinationCountry}" />
										<form:hidden path="destinationCountry" />
									</td>
									</c:when>
									<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
										<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
											<td colspan="2" class="active">	
												<spring:message code="${InventoryShipment.destinationCountry}" />
												<form:hidden path="destinationCountry" />
											</td>
										</sec:authorize>
										<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
											<td colspan="2">
												<form:select id="destinationCountry" class="form-control" style="display: inline;" path="destinationCountry" 
												ng-model="destinationCountry" ng-change="getShippingMethodList()" required="required">									
													<form:option value="">--- Select ---</form:option>
													<c:forEach var="destinationCountry" items="${destinationCountryList}">
                                                        <form:option value="${destinationCountry}"><spring:message code="${destinationCountry}"/></form:option>
													</c:forEach>									
												</form:select>
												<div class="text-danger" ng-show="InventoryShipment.destinationCountry.$error.required && InventoryShipment.destinationCountry.$dirty">
      	 											<spring:message code='inventoryShipment.destination_req'/>
												</div>									
											</td>
										</sec:authorize>
									</c:when>				
									<c:otherwise>
										<td colspan="2">
											<form:select id="destinationCountry" class="form-control" style="display: inline;" path="destinationCountry" 
											ng-model="destinationCountry" ng-change="getShippingMethodList()" required="required">									
												<form:option value="">--- Select ---</form:option>
												<c:forEach var="destinationCountry" items="${destinationCountryList}">
												    <form:option value="${destinationCountry}"><spring:message code="${destinationCountry}"/></form:option>
												</c:forEach>									
											</form:select>
											<div class="text-danger" ng-show="InventoryShipment.destinationCountry.$error.required && InventoryShipment.destinationCountry.$dirty">
      	 										<spring:message code='inventoryShipment.destination_req'/>
											</div>									
										</td>
									</c:otherwise>		
								</c:choose>				
								<td id="shipping-rates" style="padding-left:40px;"></td>
							</tr>
							<tr>
								<td class="text-right">
									<b><spring:message code='inventoryShipment.shippingMethod' /></b><span class="text-danger">*</span>
								</td>
								<c:choose>
									<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
										<td colspan="2" class="active">	
											<spring:message code="${InventoryShipment.shippingMethod}" />
											<form:hidden path="shippingMethod" />
										</td>
									</c:when>
									<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
										<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
											<td colspan="2" class="active">	
												<spring:message code="${InventoryShipment.shippingMethod}" />
												<form:hidden path="shippingMethod" />
											</td>
										</sec:authorize>
										<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
											<td colspan="2">
												<form:select id="shippingMethod" class="form-control" style="display: inline;" path="shippingMethod" 
												ng-model="shippingMethod" ng-mouseup="getDaysToPrepare()" required="required">									
												</form:select>
												<div class="text-danger" ng-show="InventoryShipment.shippingMethod.$error.required && InventoryShipment.shippingMethod.$dirty">
      	 											<spring:message code='inventoryShipment.shippingMethod_req'/>
												</div>	
											</td>
										</sec:authorize>
									</c:when>
									<c:otherwise>
										<td colspan="2">
											<form:select id="shippingMethod" class="form-control" style="display: inline;" path="shippingMethod" 
											ng-model="shippingMethod" ng-mouseup="getDaysToPrepare()" required="required">									
											</form:select>
											<div class="text-danger" ng-show="InventoryShipment.shippingMethod.$error.required && InventoryShipment.shippingMethod.$dirty">
      	 										<spring:message code='inventoryShipment.shippingMethod_req'/>
											</div>	
										</td>
									</c:otherwise>		
								</c:choose>																	
							</tr>
							<tr>
								<td class="text-right">
									<b><spring:message code='inventoryShipment.expectedExportDate' /></b></b><span class="text-danger">*</span>
								</td>
								<c:choose>
									<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
										<td colspan="2" class="active">	
											${InventoryShipment.expectedExportDate}
											<form:hidden path="expectedExportDate" />
										</td>
									</c:when>
									<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
										<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
											<td colspan="2" class="active">	
												${InventoryShipment.expectedExportDate}
												<form:hidden path="expectedExportDate" />
											</td>
										</sec:authorize>
										<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
											<td colspan="2">
												<form:input id="expectedExportDate" class="form-control" style="display: inline;" path="expectedExportDate" 
												ng-model="expectedExportDate" ng-change="getFCADeliveryDate()" required="required" disabled="true"/>														
												<div class="text-danger" ng-show="InventoryShipment.expectedExportDate.$error.required && InventoryShipment.expectedExportDate.$dirty">
      	 											<spring:message code='inventoryShipment.expectedExportDate_req'/>
												</div>
											</td>
										</sec:authorize>
									</c:when>
									<c:otherwise>				  
										<td colspan="2">
											<form:input id="expectedExportDate" class="form-control" style="display: inline;" path="expectedExportDate" 
											ng-model="expectedExportDate" ng-change="getFCADeliveryDate()" required="required" disabled="true"/>														
											<div class="text-danger" ng-show="InventoryShipment.expectedExportDate.$error.required && InventoryShipment.expectedExportDate.$dirty">
      	 										<spring:message code='inventoryShipment.expectedExportDate_req'/>
											</div>
										</td>								
									</c:otherwise>		
								</c:choose>														
								<td id="exportDateDesc">							
									<spring:message code='inventoryShipment.referToShippingSchedule'/>							
								</td>
							</tr>							
							<tr>
								<td class="text-right">
									<b><spring:message code='inventoryShipment.FCADeliveryDate' /></b><span class="text-danger">*</span>
								</td>
								<c:choose>
									<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
										<td colspan="2" class="active">	
											${InventoryShipment.fcaDeliveryDate}
											<form:hidden path="fcaDeliveryDate" />
										</td>
									</c:when>
									<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
										<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
											<td colspan="2" class="active">	
												${InventoryShipment.fcaDeliveryDate}
												<form:hidden path="fcaDeliveryDate" />
											</td>
										</sec:authorize>
										<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
											<td colspan="2">			
												<form:input id="fcaDeliveryDate" class="form-control" style="display:inline;" path="fcaDeliveryDate" />
											</td>
										</sec:authorize>
									</c:when>					
									<c:otherwise>
										<td colspan="2">			
											<form:input id="fcaDeliveryDate" class="form-control" style="display:inline;" path="fcaDeliveryDate" />
										</td>
									</c:otherwise>		
								</c:choose>					
							</tr>
							<tr>
								<td class="text-right">
									<b><spring:message code='inventoryShipment.specialRequest' /></b>
									<label class="col-sm-4 col-form-label" data-html="true" data-toggle="tooltip" data-placement="top" title="<spring:message code="inventoryShipment.special_request_hint" />">
										<span class="fas fa-info-circle fa-1x" style="color:#428bca;"></span>
									</label>

								</td>
								<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
									<td class="active" colspan="2">
										${InventoryShipment.specialRequest}
										<form:hidden path="specialRequest" />
									</td>
								</sec:authorize>
								<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
									<c:choose>
										<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
											<td class="active" colspan="2">
												${InventoryShipment.specialRequest}
												<form:hidden path="specialRequest" />
											</td>		
										</c:when>
										<c:otherwise>
											<td colspan="2">
												<form:textarea class="form-control" path="specialRequest" rows="5" cols="30"/>										
											</td>
										</c:otherwise>		
									</c:choose>									
								</sec:authorize>
							</tr>
							<tr>
								<td class="text-right">
									<b><spring:message code='inventoryShipment.boxesNeedRepackaging' /></b>
								</td>
								<c:choose>
									<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
										<td class="active" colspan="2">
											${InventoryShipment.boxesNeedRepackaging}
											<form:hidden path="boxesNeedRepackaging" />
										</td>
									</c:when>
									<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
										<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
											<td class="active" colspan="2">
												${InventoryShipment.boxesNeedRepackaging}
												<form:hidden path="boxesNeedRepackaging" />
											</td>
										</sec:authorize>
										<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
											<td colspan="2">								
												<form:input id="boxesNeedRepackaging" class="form-control" style="display:inline;text-align:right;" path="boxesNeedRepackaging" ng-model="boxesNeedRepackaging"/>																										
											</td>
										</sec:authorize>
									</c:when>
									<c:otherwise>		
										<td colspan="2">								
											<form:input id="boxesNeedRepackaging" class="form-control" style="display:inline;text-align:right;" path="boxesNeedRepackaging" ng-model="boxesNeedRepackaging"/>																										
										</td>
									</c:otherwise>		
								</c:choose>
							</tr>
							<tr>
								<td class="text-right">
									<b><spring:message code='inventoryShipment.repackagingFee' /></b>
								</td>
								<c:choose>
									<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
										<td class="active" colspan="2">
											${InventoryShipment.repackagingFee}
											<form:hidden path="repackagingFee" />
										</td>
									</c:when>
									<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
										<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
											<td class="active" colspan="2">
												${InventoryShipment.repackagingFee}
												<form:hidden path="repackagingFee" />
											</td>
										</sec:authorize>
										<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
											<td colspan="2">
												<form:input id="repackagingFee" class="form-control" style="display:inline;text-align:right;" path="repackagingFee" ng-model="repackagingFee" ng-readonly="isSupplier"/>
											</td>
										</sec:authorize>
									</c:when>
									<c:otherwise>
										<td colspan="2">
											<form:input id="repackagingFee" class="form-control" style="display:inline;text-align:right;" path="repackagingFee" ng-model="repackagingFee" ng-readonly="isSupplier"/>
										</td>
									</c:otherwise>		
								</c:choose>
							</tr>
							<tr>
								<td class="text-right">
									<b><spring:message code='inventoryShipment.requiredPO' /></b>
								</td>
								<c:choose>
									<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
										<td class="active" colspan="2">
											<spring:message code='inventoryShipment.${InventoryShipment.requiredPO}' />
											<form:hidden path="requiredPO" />
										</td>
									</c:when>
									<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
										<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
											<td class="active" colspan="2">
												<spring:message code='inventoryShipment.${InventoryShipment.requiredPO}' />
												<form:hidden path="requiredPO" />
											</td>
										</sec:authorize>
										<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
											<td colspan="2">									
												<form:checkbox id="requiredPO" path="requiredPO" ng-model="requiredPO" ng-change="removePONumber()" />																																			
											</td>
										</sec:authorize>
									</c:when>			
									<c:otherwise>
										<td colspan="2">									
											<form:checkbox id="requiredPO" path="requiredPO" ng-model="requiredPO" ng-change="removePONumber()" />																																			
										</td>
									</c:otherwise>
								</c:choose>								
							</tr>
							<tr>
								<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
									<td class="text-right">
										<b><spring:message code='inventoryShipment.PONumber' /></b>
									</td>
									<c:choose>
										<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
											<td class="active" colspan="2">
												${InventoryShipment.PONumber}
												<form:hidden path="PONumber" />
											</td>
										</c:when>
										<c:otherwise>
											<td colspan="2">
												<form:input id="PONumber" class="form-control" path="PONumber" ng-model="PONumber" ng-required="requiredPO" ng-disabled="!requiredPO" />
												<div class="text-danger" ng-show="InventoryShipment['PONumber'].$error.required && InventoryShipment['PONumber'].$dirty">
													<spring:message code='inventoryShipment.PONumber_req' />
												</div>
											</td>
										</c:otherwise>
									</c:choose>
								</sec:authorize>
								<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
									<c:choose>
										<c:when test="${type ne 'Create'}">
											<td class="text-right">
												<b><spring:message code='inventoryShipment.PONumber' /></b>
											</td>	
											<td class="active" colspan="2">	
												${InventoryShipment.PONumber}
												<form:hidden path="PONumber" />
											</td>
										</c:when>
									</c:choose>									
								</sec:authorize>																														
								<sec:authorize access="hasAnyRole('${auth['INVENTORY_SHIPMENTS_PURCHASE_ORDER']}')">									
									<c:if test="${InventoryShipment.status == 'SHPT_AWAIT_PLAN' || InventoryShipment.status == 'SHPT_PLANNING' || InventoryShipment.status == 'SHPT_CONFIRMED' || InventoryShipment.status == 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status == 'SHPT_IN_TRANSIT' || InventoryShipment.status == 'SHPT_RECEIVING' || InventoryShipment.status == 'SHPT_RECEIVED' || InventoryShipment.status == 'SHPT_EXCEPTION'}">
										<td ng-if="PONumber != null">
											<a class="btn btn-primary" target="_blank" href="${pageContext.request.contextPath}/InventoryShipments/${InventoryShipment.name}/{{PONumber}}/PurchaseOrder">
												<spring:message code="inventoryShipment.printPO" />
											</a> 
   										</td>   
									</c:if>																																																
								</sec:authorize>
							</tr>							
				</table>
			</div>
				<c:choose>
					<c:when test="${type ne 'Create'}">
						<div class="col-md-4">
							<table class="table table-withoutBorder table-autoWidth">
								<tr>
									<td class="text-right">
										<b><spring:message code='inventoryShipment.status' /></b>
									</td>
								<c:choose>
									<c:when test="${status eq 'noDRAFT'}">						
										<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">	
									<td>
										<form:select id="status" class="form-control" path="status">
											<c:choose>
												<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED'}">													
													<form:option value="SHPT_CONFIRMED" >
														<spring:message code="SHPT_CONFIRMED"/>
													</form:option>																										
													<form:option value="SHPT_AWAIT_PICK_UP">
														<spring:message code="SHPT_AWAIT_PICK_UP"/>
													</form:option>													
													<form:option value="SHPT_IN_TRANSIT">
														<spring:message code="SHPT_IN_TRANSIT"/>
													</form:option>													
													<form:option value="SHPT_RECEIVING">
														<spring:message code="SHPT_RECEIVING"/>													
													</form:option>																										
													<form:option value="SHPT_RECEIVED">
														<spring:message code="SHPT_RECEIVED"/>
													</form:option>													
													<form:option value="SHPT_EXCEPTION">
														<spring:message code="SHPT_EXCEPTION" />																										
													</form:option>
												</c:when>
												<c:when test="${InventoryShipment.status eq 'SHPT_AWAIT_PLAN'}">													
													<form:option value="SHPT_AWAIT_PLAN">
														<spring:message code="SHPT_AWAIT_PLAN"/>													
													</form:option>
												</c:when>
												<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">													
													<form:option value="SHPT_PLANNING">
														<spring:message code="SHPT_PLANNING"/>													
													</form:option>
												</c:when>
												<c:when test="${InventoryShipment.status eq 'SHPT_INITIAL_VERIFIED'}">
                                                    <form:option value="SHPT_INITIAL_VERIFIED">
                                                	    <spring:message code="SHPT_INITIAL_VERIFIED"/>
                                                    </form:option>
                                                </c:when>
												<c:when test="${InventoryShipment.status ne 'SHPT_AWAIT_PLAN' && InventoryShipment.status ne 'SHPT_PLANNING' && InventoryShipment.status ne 'SHPT_CONFIRMED'}">
													<form:option value="SHPT_AWAIT_PICK_UP">
														<spring:message code="SHPT_AWAIT_PICK_UP"/>
													</form:option>
													<form:option value="SHPT_IN_TRANSIT">
														<spring:message code="SHPT_IN_TRANSIT"/>																								
													</form:option>													
													<form:option value="SHPT_RECEIVING">
														<spring:message code="SHPT_RECEIVING"/>
													</form:option>																										
													<form:option value="SHPT_RECEIVED">
														<spring:message code="SHPT_RECEIVED"/>
													</form:option>																										
													<form:option value="SHPT_EXCEPTION">
														<spring:message code="SHPT_EXCEPTION"/>
													</form:option>
												</c:when>
											</c:choose>
										</form:select>
									</td>
										</sec:authorize>
										<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">	
									<td class="active">
										<spring:message code="${InventoryShipment.status}" />
									</td>
										</sec:authorize>
								</c:when>
								<c:otherwise>
									<td class="active">
										<spring:message code="${InventoryShipment.status}" />
									</td>
								</c:otherwise>
							</c:choose>
								</tr>
								<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
									<c:choose>
										<c:when test="${type ne 'Create' && status ne 'DRAFT' && status ne 'null'}">
								<tr>
									<td class="text-right">
										<b><spring:message code='inventoryShipment.seller' /></b>
									</td>
									<td class="active">
										${InventoryShipment.sellerCompanyKcode} ${AllCompanyKcodeToNameMap[InventoryShipment.sellerCompanyKcode]}
										<form:hidden path="sellerCompanyKcode" />
									</td>
									</tr>
										</c:when>
									</c:choose>								
									<c:choose>
										<c:when test="${type ne 'Create' && status ne 'DRAFT' && status ne 'null'}">
								<tr>
									<td class="text-right">
										<b><spring:message code='inventoryShipment.buyer' /></b>
									</td>
									<td class="active">
										${InventoryShipment.buyerCompanyKcode} ${AllCompanyKcodeToNameMap[InventoryShipment.buyerCompanyKcode]}
										<form:hidden path="buyerCompanyKcode" />
									</td>
								</tr>
										</c:when>
									</c:choose>
								</sec:authorize>
								<tr>
									<td class="text-right">
										<b><spring:message code='inventoryShipment.dateCreated' /></b>
									</td>
									<td class="active">
										${InventoryShipment.dateCreated}
									</td>
								</tr>
								<tr>
									<td class="text-right">
										<b><spring:message code='inventoryShipment.invoiceNumber' /></b>
									</td>
									<c:choose>
										<c:when test="${status eq 'noDRAFT'}">
											<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">	
									<td class="danger">
										<form:input id="invoiceNumber" class="form-control" path="invoiceNumber" ng-model="invoiceNumber" ng-pattern="/^[a-zA-Z0-9]+$/"/>
										<div class="text-danger" ng-show="InventoryShipment['invoiceNumber'].$error.pattern">
											<spring:message code='inventoryShipment.InvoiceNumber_format' />
										</div>						
									</td>
											</sec:authorize>
											<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
									<td class="active">
										${InventoryShipment.invoiceNumber}
									</td>												
											</sec:authorize>
										</c:when>
										<c:otherwise>
									<td class="active">
										${InventoryShipment.invoiceNumber}
									</td>
										</c:otherwise>
									</c:choose>
								</tr>
								<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
								<c:choose>
								<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED'}">								
								<tr>
									<td></td>
									<td style="color: #2A6496;">
										<spring:message code='inventoryShipment.invoiceNumber_hint'/>
									</td>
								</tr>
								</c:when>		
								</c:choose>
								</sec:authorize>
								<tr>
									<td class="text-right">
										<b><spring:message code='inventoryShipment.datePurchased'/></b>
									</td>
									<td class="active">
										${InventoryShipment.datePurchased}
									</td>
								</tr>
								<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
								<tr>
									<td colspan="2">
										<form:hidden path="internalNote" />
									</td>
								</tr>
								</sec:authorize>
								<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">	
								<tr>
									<td class="text-right">
										<b><spring:message code='inventoryShipment.internalNote'/></b>
									</td>				    	
									<td class="danger">
										<form:textarea path="internalNote" class="form-control" rows="5" cols="30"/>
									</td>
								</tr>														
								</sec:authorize>
									<sec:authorize access="hasAnyRole('${auth['ADMIN_ONLY']}')">
								<c:choose>
				    				<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
				    					<tr>
				    						<td class="text-right">
				    							<b><spring:message code='inventoryShipment.shippingCost'/></b>
				    						</td>
				    						<td>${shippingCost}</td>
				    					</tr>
				    				</c:when>
				    			</c:choose>		
				    				</sec:authorize>																																							
							</table>
						</div>
					</c:when>
				</c:choose>
			</div>			
			<div class="row text-danger" ng-show="FCAPriceNoneEqual">			
				<div class="col-md-12">
					<spring:message code='inventoryShipment.FCAPriceNoneEqual'/>
				</div>
			</div>
			<div class="row">			
				<div class="col-md-12">
					<table class="table">
						<thead>
							<tr id="newSKU">
								<th style="width: 15%;">
									<spring:message code='inventoryShipment.sku' /><span class="text-danger">*</span>
								</th>
								<th style="width: 5%;">
									<spring:message code='inventoryShipment.requireRepackaging' /><span class="text-danger">*</span>
								</th>
								<th class="text-center" style="width: 5%;">
									<spring:message code='inventoryShipment.cartonNumber' /><span class="text-danger">*</span>
								</th>
								<th class="text-center" style="width: 20%;">
									<spring:message code='inventoryShipment.cartonDimensions' /><span class="text-danger">*</span>
								</th>
								<th class="text-center" style="width: 5%;">
									<spring:message code='inventoryShipment.grossWeightPerCarton' /><span class="text-danger">*</span>
								</th>								
								<th class="text-center" style="width: 5%;">
									<spring:message code='inventoryShipment.unitsPerCarton' /><span class="text-danger">*</span>
								</th>
								<th class="text-center" style="width: 5%;">
									<spring:message code='inventoryShipment.numberOfCartons' /><span class="text-danger">*</span>
								</th>
								<th class="text-right" style="width: 5%;">
									<spring:message code='inventoryShipment.quantity' />
								</th>
								<th class="text-center" style="width: 5%;">
									<spring:message code='inventoryShipment.uniPrice' /><span class="text-danger">*</span>
								</th>
								<th class="text-right" style="width: 5%;">
									<spring:message code='inventoryShipment.amount' />
								</th>
								<th style="width: 10%;">
									<spring:message code='inventoryShipment.GUIInvoiceNumber' />
								</th>
								<th style="width: 10%;">
									<spring:message code='inventoryShipment.GUIInvoice' />
								</th>																													  								
								<th style="width: 5%;"></th>	
							</tr>
						</thead>
					<tbody>
					<tr id="newSKU{{$id}}" ng-repeat="item in lineItems">				   				    				    				   						   		
				   		<td>
				   		<input type="hidden" id="id{{$id}}" name="lineItem[{{$id}}].id" ng-model="item.id" value="{{item.id}}" type="text" ></input>
				   			<c:choose>
								<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
									<input type="hidden" id="boxNum{{$id}}" name="lineItem[{{$id}}].boxNum" ng-model="item.boxNum" value="{{item.boxNum}}" type="text" ></input>
				   					<input type="hidden" id="mixedBoxLineSeq{{$id}}" name="lineItem[{{$id}}].mixedBoxLineSeq" ng-model="item.mixedBoxLineSeq" value="{{item.mixedBoxLineSeq}}" type="text" ></input>									
									{{item.skuCode}}
									<input type="hidden" name="lineItem[{{$id}}].skuCode" value="{{item.skuCode}}" />
									{{item.nameBySupplier}}
								</c:when>
								<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
									<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
										<input type="hidden" id="boxNum{{$id}}" name="lineItem[{{$id}}].boxNum" ng-model="item.boxNum" value="{{item.boxNum}}" type="text" ></input>
				   						<input type="hidden" id="mixedBoxLineSeq{{$id}}" name="lineItem[{{$id}}].mixedBoxLineSeq" ng-model="item.mixedBoxLineSeq" value="{{item.mixedBoxLineSeq}}" type="text" ></input>									
										{{item.skuCode}}
										<input type="hidden" name="lineItem[{{$id}}].skuCode" value="{{item.skuCode}}" />
										{{item.nameBySupplier}}
									</sec:authorize>
									<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
										<input type="hidden" id="boxNum{{$id}}" name="lineItem[{{$id}}].boxNum" ng-model="item.boxNum" value="{{item.boxNum}}" type="text" ></input>
				   						<input type="hidden" id="mixedBoxLineSeq{{$id}}" name="lineItem[{{$id}}].mixedBoxLineSeq" ng-model="item.mixedBoxLineSeq" value="{{item.mixedBoxLineSeq}}" type="text" ></input>				   		
										<select id ="SKU{{$id}}" class="form-control sku-selector" name ="lineItem[{{$id}}].skuCode" ng-model="item.skuCode" ng-change="verifySKUForUnMixedBox(item)" required>
										<option value="">--- Select ---</option>									
										<c:forEach var="ActiveSkuCodeToName" items="${ActiveSkuCodeToNameMap}">
										<option value="${ActiveSkuCodeToName.key}">${ActiveSkuCodeToName.key} ${ActiveSkuCodeToName.value}</option>											
										</c:forEach>					
										</select>							
										<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].skuCode'].$error.required && InventoryShipment['lineItem[{{$id}}].skuCode'].$dirty">
											<spring:message code='inventoryShipment.SKU_req' />
										</div>																					
										<div class="text-danger"  ng-if="item.isDuplicate">
                    						<spring:message code='inventoryShipment.SKU_dup' />
                						</div>
									</sec:authorize>
								</c:when>
								<c:otherwise>
									<input type="hidden" id="boxNum{{$id}}" name="lineItem[{{$id}}].boxNum" ng-model="item.boxNum" value="{{item.boxNum}}" type="text" ></input>
				   					<input type="hidden" id="mixedBoxLineSeq{{$id}}" name="lineItem[{{$id}}].mixedBoxLineSeq" ng-model="item.mixedBoxLineSeq" value="{{item.mixedBoxLineSeq}}" type="text" ></input>				   		
									<select id ="SKU{{$id}}" class="form-control sku-selector" name ="lineItem[{{$id}}].skuCode" ng-model="item.skuCode" ng-change="verifySKUForUnMixedBox(item)" required>
									<option value="">--- Select ---</option>									
									<c:forEach var="ActiveSkuCodeToName" items="${ActiveSkuCodeToNameMap}">
									<option value="${ActiveSkuCodeToName.key}">${ActiveSkuCodeToName.key} ${ActiveSkuCodeToName.value}</option>											
									</c:forEach>					
									</select>							
									<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].skuCode'].$error.required && InventoryShipment['lineItem[{{$id}}].skuCode'].$dirty">
										<spring:message code='inventoryShipment.SKU_req' />
									</div>																					
									<div class="text-danger"  ng-if="item.isDuplicate">
                    					<spring:message code='inventoryShipment.SKU_dup' />
                					</div>
								</c:otherwise>		
							</c:choose>
						</td>	
							<c:choose>
								<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
									<td class="text-center">
										<span ng-if="item.requireRepackaging == true"><spring:message code='inventoryShipment.true' /></span>
										<span ng-if="item.requireRepackaging == false"><spring:message code='inventoryShipment.false' /></span>
										<input type="hidden" name="lineItem[{{$id}}].requireRepackaging" value="{{item.requireRepackaging}}" />
									</td>		
								</c:when>
								<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
									<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">										  
										<td class="text-center">
											<span ng-if="item.requireRepackaging == true"><spring:message code='inventoryShipment.true' /></span>
											<span ng-if="item.requireRepackaging == false"><spring:message code='inventoryShipment.false' /></span>
											<input type="hidden" name="lineItem[{{$id}}].requireRepackaging" value="{{item.requireRepackaging}}" />
										</td>
									</sec:authorize>
									<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
										<td class="text-center">
											<input id="requireRepackaging{{$id}}" type="checkbox" name="lineItem[{{$id}}].requireRepackaging" ng-model="item.requireRepackaging" ng-change="calculateRepackgingFee()">
										</td>
									</sec:authorize>
								</c:when>			
								<c:otherwise>
									<td class="text-center">
										<input id="requireRepackaging{{$id}}" type="checkbox" name="lineItem[{{$id}}].requireRepackaging" ng-model="item.requireRepackaging" ng-change="calculateRepackgingFee()">
									</td>	
								</c:otherwise>		
							</c:choose>
						<td class="text-center active"> 
							{{item.cartonNumberStart}} ~ {{item.cartonNumberEnd}}
						</td>						
						<td class="text-center">
							<c:choose>
								<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
									{{item.cartonDimensionCm1}} x {{item.cartonDimensionCm2}} x {{item.cartonDimensionCm3}}
									<input type="hidden" name="lineItem[{{$id}}].cartonDimensionCm1" value="{{item.cartonDimensionCm1}}" />
									<input type="hidden" name="lineItem[{{$id}}].cartonDimensionCm2" value="{{item.cartonDimensionCm2}}" />
									<input type="hidden" name="lineItem[{{$id}}].cartonDimensionCm3" value="{{item.cartonDimensionCm3}}" />							
								</c:when>
								<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
									<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
										{{item.cartonDimensionCm1}} x {{item.cartonDimensionCm2}} x {{item.cartonDimensionCm3}}
										<input type="hidden" name="lineItem[{{$id}}].cartonDimensionCm1" value="{{item.cartonDimensionCm1}}" />
										<input type="hidden" name="lineItem[{{$id}}].cartonDimensionCm2" value="{{item.cartonDimensionCm2}}" />
										<input type="hidden" name="lineItem[{{$id}}].cartonDimensionCm3" value="{{item.cartonDimensionCm3}}" />
									</sec:authorize>
									<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
										<input name="lineItem[{{$id}}].cartonDimensionCm1" class="form-control" style="width:20%;display: inline;padding: 6px 2px 6px 2px;text-align:right;" ng-model="item.cartonDimensionCm1" ng-pattern="/^(?:[1-9]\d*)?(?:\.\d+)?$/" value="" type="text" size="3" required> x
										<input name="lineItem[{{$id}}].cartonDimensionCm2" class="form-control" style="width:20%;display: inline;padding: 6px 2px 6px 2px;text-align:right;" ng-model="item.cartonDimensionCm2" ng-pattern="/^(?:[1-9]\d*)?(?:\.\d+)?$/" value="" type="text" size="3" required> x
										<input name="lineItem[{{$id}}].cartonDimensionCm3" class="form-control" style="width:20%;display: inline;padding: 6px 2px 6px 2px;text-align:right;" ng-model="item.cartonDimensionCm3" ng-pattern="/^(?:[1-9]\d*)?(?:\.\d+)?$/" value="" type="text" size="3" required>
										<div class="text-danger" ng-show="(InventoryShipment['lineItem[{{$id}}].cartonDimensionCm1'].$error.required && InventoryShipment['lineItem[{{$id}}].cartonDimensionCm1'].$dirty) || (InventoryShipment['lineItem[{{$id}}].cartonDimensionCm2'].$error.required && InventoryShipment['lineItem[{{$id}}].cartonDimensionCm2'].$dirty) || (InventoryShipment['lineItem[{{$id}}].cartonDimensionCm3'].$error.required && InventoryShipment['lineItem[{{$id}}].cartonDimensionCm3'].$dirty)">
											<spring:message code='inventoryShipment.cartonDimensions_req' />
										</div>
										<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].cartonDimensionCm1'].$error.pattern || InventoryShipment['lineItem[{{$id}}].cartonDimensionCm2'].$error.pattern || InventoryShipment['lineItem[{{$id}}].cartonDimensionCm3'].$error.pattern">
            								<spring:message code='inventoryShipment.cartonDimensions_format' />
        								</div>
									</sec:authorize>
								</c:when>		
								<c:otherwise>
									<input name="lineItem[{{$id}}].cartonDimensionCm1" class="form-control" style="width:20%;display: inline;padding: 6px 2px 6px 2px;text-align:right;" ng-model="item.cartonDimensionCm1" ng-pattern="/^(?:[1-9]\d*)?(?:\.\d+)?$/" value="" type="text" size="3" required> x
									<input name="lineItem[{{$id}}].cartonDimensionCm2" class="form-control" style="width:20%;display: inline;padding: 6px 2px 6px 2px;text-align:right;" ng-model="item.cartonDimensionCm2" ng-pattern="/^(?:[1-9]\d*)?(?:\.\d+)?$/" value="" type="text" size="3" required> x
									<input name="lineItem[{{$id}}].cartonDimensionCm3" class="form-control" style="width:20%;display: inline;padding: 6px 2px 6px 2px;text-align:right;" ng-model="item.cartonDimensionCm3" ng-pattern="/^(?:[1-9]\d*)?(?:\.\d+)?$/" value="" type="text" size="3" required>
									<div class="text-danger" ng-show="(InventoryShipment['lineItem[{{$id}}].cartonDimensionCm1'].$error.required && InventoryShipment['lineItem[{{$id}}].cartonDimensionCm1'].$dirty) || (InventoryShipment['lineItem[{{$id}}].cartonDimensionCm2'].$error.required && InventoryShipment['lineItem[{{$id}}].cartonDimensionCm2'].$dirty) || (InventoryShipment['lineItem[{{$id}}].cartonDimensionCm3'].$error.required && InventoryShipment['lineItem[{{$id}}].cartonDimensionCm3'].$dirty)">
										<spring:message code='inventoryShipment.cartonDimensions_req' />
									</div>
									<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].cartonDimensionCm1'].$error.pattern || InventoryShipment['lineItem[{{$id}}].cartonDimensionCm2'].$error.pattern || InventoryShipment['lineItem[{{$id}}].cartonDimensionCm3'].$error.pattern">
            							<spring:message code='inventoryShipment.cartonDimensions_format' />
        							</div>
								</c:otherwise>		
							</c:choose>						
						</td>
						<td class="text-center">										
							<c:choose>
								<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
									{{item.perCartonGrossWeightKg}}
									<input type="hidden" name="lineItem[{{$id}}].perCartonGrossWeightKg" value="{{item.perCartonGrossWeightKg}}" />
								</c:when>
								<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
									<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
										{{item.perCartonGrossWeightKg}}
										<input type="hidden" name="lineItem[{{$id}}].perCartonGrossWeightKg" value="{{item.perCartonGrossWeightKg}}" />
									</sec:authorize>
									<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
										<input name="lineItem[{{$id}}].perCartonGrossWeightKg" class="form-control" style="padding: 6px 2px 6px 2px;text-align:right;" ng-model="item.perCartonGrossWeightKg" ng-pattern="/^(0*[1-9][0-9]*(\.[0-9]+)?|0*\.[0-9]*[1-9][0-9]*)$/" value="" type="text" size="10" required></input>
										<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].perCartonGrossWeightKg'].$error.required && InventoryShipment['lineItem[{{$id}}].perCartonGrossWeightKg'].$dirty">
											<spring:message code='inventoryShipment.grossWeightPerCarton_req' />
										</div>
										<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].perCartonGrossWeightKg'].$error.pattern">
											<spring:message code='inventoryShipment.grossWeightPerCarton_format' />
										</div>
									</sec:authorize>
								</c:when>								
								<c:otherwise>
									<input name="lineItem[{{$id}}].perCartonGrossWeightKg" class="form-control" style="padding: 6px 2px 6px 2px;text-align:right;" ng-model="item.perCartonGrossWeightKg" ng-pattern="/^(0*[1-9][0-9]*(\.[0-9]+)?|0*\.[0-9]*[1-9][0-9]*)$/" value="" type="text" size="10" required></input>
									<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].perCartonGrossWeightKg'].$error.required && InventoryShipment['lineItem[{{$id}}].perCartonGrossWeightKg'].$dirty">
										<spring:message code='inventoryShipment.grossWeightPerCarton_req' />
									</div>
									<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].perCartonGrossWeightKg'].$error.pattern">
										<spring:message code='inventoryShipment.grossWeightPerCarton_format' />
									</div>
								</c:otherwise>		
							</c:choose>
						</td>																																	
						<td class="text-center">
							<c:choose>
								<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
									{{item.perCartonUnits}}
									<input type="hidden" name="lineItem[{{$id}}].perCartonUnits" value="{{item.perCartonUnits}}" />
								</c:when>
								<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
									<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
										{{item.perCartonUnits}}
										<input type="hidden" name="lineItem[{{$id}}].perCartonUnits" value="{{item.perCartonUnits}}" />
									</sec:authorize>
									<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
										<input id="units{{$id}}" name="lineItem[{{$id}}].perCartonUnits" class="form-control" style="padding: 6px 2px 6px 2px;text-align:right;" ng-model="item.perCartonUnits" ng-pattern="/^[1-9][0-9]*$/"  ng-change="calculateQuantity(this)" value="" type="text" size="3" required></input>																				
										<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].perCartonUnits'].$error.required && InventoryShipment['lineItem[{{$id}}].perCartonUnits'].$dirty">
											<spring:message code='inventoryShipment.unitsPerCarton_req' />
										</div>
										<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].perCartonUnits'].$error.pattern">
											<spring:message code='inventoryShipment.unitsPerCarton_format' />
										</div>
									</sec:authorize>
								</c:when>								
								<c:otherwise>
									<input id="units{{$id}}" name="lineItem[{{$id}}].perCartonUnits" class="form-control" style="padding: 6px 2px 6px 2px;text-align:right;" ng-model="item.perCartonUnits" ng-pattern="/^[1-9][0-9]*$/"  ng-change="calculateQuantity(this)" value="" type="text" size="3" required></input>																				
									<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].perCartonUnits'].$error.required && InventoryShipment['lineItem[{{$id}}].perCartonUnits'].$dirty">
										<spring:message code='inventoryShipment.unitsPerCarton_req' />
									</div>
									<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].perCartonUnits'].$error.pattern">
										<spring:message code='inventoryShipment.unitsPerCarton_format' />
									</div>
								</c:otherwise>		
							</c:choose>
						</td>					
						<td class="text-center">
							<c:choose>
								<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
									{{item.cartonCounts}}
									<input type="hidden" name="lineItem[{{$id}}].cartonCounts" value="{{item.cartonCounts}}" />
								</c:when>
								<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
									<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
										{{item.cartonCounts}}
										<input type="hidden" name="lineItem[{{$id}}].cartonCounts" value="{{item.cartonCounts}}" />
									</sec:authorize>
									<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
										<input id="number{{$id}}" name="lineItem[{{$id}}].cartonCounts" class="form-control" style="padding: 6px 2px 6px 2px;text-align:right;" ng-model="item.cartonCounts" ng-pattern="/^[1-9][0-9]*$/" ng-change="calculateQuantity(this)" value="" type="text" size="3" required></input>
										<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].cartonCounts'].$error.required && InventoryShipment['lineItem[{{$id}}].cartonCounts'].$dirty">
											<spring:message code='inventoryShipment.numberOfCartons_req' />
										</div>
										<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].cartonCounts'].$error.pattern">
											<spring:message code='inventoryShipment.numberOfCartons_format' />
										</div>
									</sec:authorize>
								</c:when>
								<c:otherwise>
									<input id="number{{$id}}" name="lineItem[{{$id}}].cartonCounts" class="form-control" style="padding: 6px 2px 6px 2px;text-align:right;" ng-model="item.cartonCounts" ng-pattern="/^[1-9][0-9]*$/" ng-change="calculateQuantity(this)" value="" type="text" size="3" required></input>
									<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].cartonCounts'].$error.required && InventoryShipment['lineItem[{{$id}}].cartonCounts'].$dirty">
										<spring:message code='inventoryShipment.numberOfCartons_req' />
									</div>
									<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].cartonCounts'].$error.pattern">
										<spring:message code='inventoryShipment.numberOfCartons_format' />
									</div>
								</c:otherwise>		
							</c:choose>						
						</td>
						<td class="text-right active">
							{{item.quantity}}
							<input type="hidden" id="quantity{{$id}}" name="lineItem[{{$id}}].quantity" ng-model="item.quantity" value="{{item.quantity}}" type="text" size="3"></input>
						</td>
						<td class="text-center">
							<c:choose>
								<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
									{{item.unitAmount}}
									<input type="hidden" name="lineItem[{{$id}}].unitAmount" value="{{item.unitAmount}}" />
								</c:when>
								<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
									<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
										{{item.unitAmount}}
										<input type="hidden" name="lineItem[{{$id}}].unitAmount" value="{{item.unitAmount}}" />
									</sec:authorize>
									<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
										<input id="unitPrice{{$id}}" name="lineItem[{{$id}}].unitAmount" class="form-control" style="padding: 6px 2px 6px 2px;text-align:right;" ng-model="item.unitAmount" ng-pattern="/^(?:[1-9]\d*)?(?:\.\d+)?$/" ng-change="calculateAmount(this)" value="" type="text" size="5" required></input>
										<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].unitAmount'].$error.required && InventoryShipment['lineItem[{{$id}}].unitAmount'].$dirty">
											<spring:message code='inventoryShipment.uniPrice_req' />
										</div>
										<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].unitAmount'].$error.pattern">
											<spring:message code='inventoryShipment.uniPrice_format' />
										</div>
									</sec:authorize>
								</c:when>		
								<c:otherwise>
									<input id="unitPrice{{$id}}" name="lineItem[{{$id}}].unitAmount" class="form-control" style="padding: 6px 2px 6px 2px;text-align:right;" ng-model="item.unitAmount" ng-pattern="/^(?:[1-9]\d*)?(?:\.\d+)?$/" ng-change="calculateAmount(this)" value="" type="text" size="5" required></input>
									<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].unitAmount'].$error.required && InventoryShipment['lineItem[{{$id}}].unitAmount'].$dirty">
										<spring:message code='inventoryShipment.uniPrice_req' />
									</div>
									<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].unitAmount'].$error.pattern">
										<spring:message code='inventoryShipment.uniPrice_format' />
									</div>
								</c:otherwise>		
							</c:choose>						
						</td>
						<td class="text-right active">
							{{item.amountUntaxed}}
							<input type="hidden" id="amount{{$id}}" name="lineItem[{{$id}}].amountUntaxed" ng-model="item.amountUntaxed" value="{{item.amountUntaxed}}" type="text" size="8"></input>
						</td>							
						<td>
							<c:choose>
								<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
									{{item.guiinvoiceNumber}}
									<input type="hidden" name="lineItem[{{$id}}].GUIInvoiceNumber" value="{{item.guiinvoiceNumber}}" />
								</c:when>
								<c:otherwise>
									<input id="GUIInvoiceNumber{{$id}}" name="lineItem[{{$id}}].GUIInvoiceNumber" class="form-control" style="display:inline;width:100%;padding: 6px 0px 6px 0px;text-align:center;" ng-model="item.guiinvoiceNumber" ng-pattern="/^[a-zA-Z0-9]+$/" ng-required="item.isGUIInvoiceIsRequired" ng-readonly="!item.isGUIInvoiceEnable" type="text" size="5"></input><span ng-show="item.isGUIInvoiceIsRequired" class="text-danger">*</span>
									<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].GUIInvoiceNumber'].$error.required && InventoryShipment['lineItem[{{$id}}].GUIInvoiceNumber'].$dirty">
										<spring:message code='inventoryShipment.GUIInvoiceNumber_req' />
									</div>
									<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].GUIInvoiceNumber'].$error.pattern">
										<spring:message code='inventoryShipment.GUIInvoiceNumber_format' />
									</div>
								</c:otherwise>		
							</c:choose>						
						</td>
						<td>
							<c:choose>
								<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
									{{item.guifileName}}
									<input type="hidden" id="GUIFileName{{$id}}" name="lineItem[{{$id}}].GUIFileName" ng-model="item.guifileName" value="{{item.guifileName}}" type="text" size="50" ></input>
								</c:when>
								<c:otherwise>
									<input type="file" id="GUIInvoiceFile{{$id}}" name="lineItem[{{$id}}].GUIInvoiceFile" ng-model="item.GUIInvoiceFile"
									  ng-disabled="!item.isGUIInvoiceEnable || item.guifileName != null"
									 ng-readonly="!item.isGUIInvoiceEnable || item.guifileName != null"><span ng-show="item.isGUIInvoiceIsRequired" class="text-danger">*</span>
									<button type="button" class="btn btn-primary" ng-disabled="!item.isGUIInvoiceEnable || item.guifileName != null"
									ng-click="uploadGUIInvoiceFile($id,item)">
										<span>
										<spring:message code='inventoryShipment.upload' />
										</span>
									</button>							
									{{item.guifileName}}
									<button type="button" class="btn btn-link" style="padding:0px 12px;" ng-show="item.guifileName != null"
												ng-click="removeGUIInvoiceFile(item.guifileName,item)">
									<span class="glyphicon glyphicon-remove"><spring:message code='inventoryShipment.remove' /></span>
									</button>
									<input type="hidden" id="GUIFileName{{$id}}" name="lineItem[{{$id}}].GUIFileName" ng-model="item.guifileName" value="{{item.guifileName}}" type="text" size="50" ></input>
								</c:otherwise>		
							</c:choose>
						</td>						
						<td>
							<c:choose>
								<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
								</c:when>
								<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
									<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
									</sec:authorize>
									<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
										<input id="remove{{$id}}" class="btn btn-default btn-sm" type="button" value="<spring:message code='inventoryShipment.remove'/>" ng-click="removeLineItem(item)" ng-mouseover="removeSKU=true" ng-mouseleave="removeSKU=false">
									</sec:authorize>
								</c:when>		
								<c:otherwise>
									<input id="remove{{$id}}" class="btn btn-default btn-sm" type="button" value="<spring:message code='inventoryShipment.remove'/>" ng-click="removeLineItem(item)" ng-mouseover="removeSKU=true" ng-mouseleave="removeSKU=false">
								</c:otherwise>		
							</c:choose>							
							<span class="row text-danger" ng-show="!atLeastOneSKUWarning"><spring:message code='inventoryShipment.atLeastOneSKU'/></span>
						</td>															
					</tr>
					<tr>
						<td colspan="13">
							<c:choose>
								<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
								</c:when>
								<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
									<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
									</sec:authorize>
									<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
										<input class="btn btn-default" id="add" type="button" value="<spring:message code='inventoryShipment.add'/>" style="float: right" ng-click="addLineItem()" />
									</sec:authorize>
								</c:when>								
								<c:otherwise>
									<input class="btn btn-default" id="add" type="button" value="<spring:message code='inventoryShipment.add'/>" style="float: right" ng-click="addLineItem()" />	
								</c:otherwise>		
							</c:choose>
						</td>
					</tr>
					<tr>
						<td class="text-info" colspan="13">
							---<spring:message code='inventoryShipment.mixedContentBox' />---
						</td>
					</tr>										
					<tr id="mixedContentBox{{$id}}" ng-repeat="mixedContentBox in mixedContentBoxes">						
						<td colspan="13">
							<table class="table">
								<thead>
									<tr>
										<td colspan="13">										
											<c:choose>
												<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
												</c:when>
												<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
													<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
													</sec:authorize>
													<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
														<input class="btn btn-default" id="add" type="button" value="<spring:message code='inventoryShipment.removeMixedContentBox' />" ng-click="removeMixedContentBox(mixedContentBox)" />
													</sec:authorize>
												</c:when>
												<c:otherwise>
													<input class="btn btn-default" id="add" type="button" value="<spring:message code='inventoryShipment.removeMixedContentBox' />" ng-click="removeMixedContentBox(mixedContentBox)" />
												</c:otherwise>		
											</c:choose>										
										</td>
									</tr>
									<tr>
										<th style="width: 15%;">
											<spring:message code='inventoryShipment.sku' /><span class="text-danger">*</span>
										</th>
										<th style="width: 5%;">
											<spring:message code='inventoryShipment.requireRepackaging' /><span class="text-danger">*</span>
										</th>
										<th class="text-center" style="width: 5%;">
											<spring:message code='inventoryShipment.cartonNumber' /><span class="text-danger">*</span>
										</th>
										<th class="text-center" style="width: 20%;">
											<spring:message code='inventoryShipment.cartonDimensions' /><span class="text-danger">*</span>
										</th>
										<th class="text-center" style="width: 5%;">
											<spring:message code='inventoryShipment.grossWeightPerCarton' /><span class="text-danger">*</span>
										</th>								
										<th class="text-center" style="width: 5%;">
											<spring:message code='inventoryShipment.unitsPerCarton' /><span class="text-danger">*</span>
										</th>
										<th class="text-center" style="width: 5%;">
											<spring:message code='inventoryShipment.numberOfCartons' /><span class="text-danger">*</span>
										</th>
										<th class="text-right" style="width: 5%;">
											<spring:message code='inventoryShipment.quantity' />
										</th>
										<th class="text-center" style="width: 5%;">
											<spring:message code='inventoryShipment.uniPrice' /><span class="text-danger">*</span>
										</th>
										<th class="text-right" style="width: 5%;">
											<spring:message code='inventoryShipment.amount' />
										</th>
										<th style="width: 10%;">
											<spring:message code='inventoryShipment.GUIInvoiceNumber' />
										</th>
										<th style="width: 10%;">
											<spring:message code='inventoryShipment.GUIInvoice' />
										</th>								
										<th style="width: 5%;"></th>
									</tr>
							</thead>								
						<tbody>		
							<tr id="newSKU{{$id}}" ng-repeat="mixedContentBoxItem in mixedContentBox">
								<td>
								<input type="hidden" id="id{{$id}}" name="lineItem[{{$id}}].id"
								    ng-model="mixedContentBoxItem.id" value="{{mixedContentBoxItem.id}}" type="text" ></input>
									<c:choose>
										<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
											<input type="hidden" id="boxNum{{$id}}" name="lineItem[{{$id}}].boxNum" ng-model="mixedContentBoxItem.boxNum" value="{{mixedContentBoxItem.boxNum}}" type="text" ></input>
				   							<input type="hidden" id="mixedBoxLineSeq{{$id}}" name="lineItem[{{$id}}].mixedBoxLineSeq" ng-model="mixedContentBoxItem.mixedBoxLineSeq" value="{{mixedContentBoxItem.mixedBoxLineSeq}}" type="text" ></input>		
											{{mixedContentBoxItem.skuCode}}
											<input type="hidden" name="lineItem[{{$id}}].skuCode" value="{{mixedContentBoxItem.skuCode}}" />
											{{mixedContentBoxItem.nameBySupplier}}
										</c:when>
										<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
											<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
												<input type="hidden" id="boxNum{{$id}}" name="lineItem[{{$id}}].boxNum" ng-model="mixedContentBoxItem.boxNum" value="{{mixedContentBoxItem.boxNum}}" type="text" ></input>
				   								<input type="hidden" id="mixedBoxLineSeq{{$id}}" name="lineItem[{{$id}}].mixedBoxLineSeq" ng-model="mixedContentBoxItem.mixedBoxLineSeq" value="{{mixedContentBoxItem.mixedBoxLineSeq}}" type="text" ></input>		
												{{mixedContentBoxItem.skuCode}}
												<input type="hidden" name="lineItem[{{$id}}].skuCode" value="{{mixedContentBoxItem.skuCode}}" />
												{{mixedContentBoxItem.nameBySupplier}}
											</sec:authorize>
											<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
												<input type="hidden" id="boxNum{{$id}}" name="lineItem[{{$id}}].boxNum" ng-model="mixedContentBoxItem.boxNum" value="{{mixedContentBoxItem.boxNum}}" type="text" ></input>
				   								<input type="hidden" id="mixedBoxLineSeq{{$id}}" name="lineItem[{{$id}}].mixedBoxLineSeq" ng-model="mixedContentBoxItem.mixedBoxLineSeq" value="{{mixedContentBoxItem.mixedBoxLineSeq}}" type="text" ></input>
												<select id ="SKU{{$id}}" class="form-control sku-selector" name ="lineItem[{{$id}}].skuCode" ng-model="mixedContentBoxItem.skuCode" ng-change="verifySKUForMixedBox(mixedContentBoxItem,mixedContentBox)" required>
													<option value="">--- Select ---</option>									
													<c:forEach var="ActiveSkuCodeToName" items="${ActiveSkuCodeToNameMap}">
														<option value="${ActiveSkuCodeToName.key}">${ActiveSkuCodeToName.key} ${ActiveSkuCodeToName.value}</option>											
													</c:forEach>					
												</select>
												<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].skuCode'].$error.required && InventoryShipment['lineItem[{{$id}}].skuCode'].$dirty">
													<spring:message code='inventoryShipment.SKU_req' />
												</div>																		
												<div class="text-danger" ng-if="mixedContentBoxItem.isDuplicate">
                    								<spring:message code='inventoryShipment.SKU_dup' />
                								</div>
											</sec:authorize>
										</c:when>				
										<c:otherwise>
											<input type="hidden" id="boxNum{{$id}}" name="lineItem[{{$id}}].boxNum" ng-model="mixedContentBoxItem.boxNum" value="{{mixedContentBoxItem.boxNum}}" type="text" ></input>
				   							<input type="hidden" id="mixedBoxLineSeq{{$id}}" name="lineItem[{{$id}}].mixedBoxLineSeq" ng-model="mixedContentBoxItem.mixedBoxLineSeq" value="{{mixedContentBoxItem.mixedBoxLineSeq}}" type="text" ></input>
											<select id ="SKU{{$id}}" class="form-control sku-selector" name ="lineItem[{{$id}}].skuCode" ng-model="mixedContentBoxItem.skuCode" ng-change="verifySKUForMixedBox(mixedContentBoxItem,mixedContentBox)" required>
												<option value="">--- Select ---</option>									
												<c:forEach var="ActiveSkuCodeToName" items="${ActiveSkuCodeToNameMap}">
													<option value="${ActiveSkuCodeToName.key}">${ActiveSkuCodeToName.key} ${ActiveSkuCodeToName.value}</option>											
												</c:forEach>					
											</select>
											<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].skuCode'].$error.required && InventoryShipment['lineItem[{{$id}}].skuCode'].$dirty">
												<spring:message code='inventoryShipment.SKU_req' />
											</div>																		
											<div class="text-danger" ng-if="mixedContentBoxItem.isDuplicate">
                    							<spring:message code='inventoryShipment.SKU_dup' />
                							</div>									
										</c:otherwise>		
									</c:choose>								
								</td>	
									<c:choose>
										<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
											<td ng-class="{true: 'text-center', false: 'text-center active'}[mixedContentBox.indexOf(mixedContentBoxItem)==0]">
												<span ng-if="mixedContentBoxItem.requireRepackaging == true"><spring:message code='inventoryShipment.true' /></span>
												<span ng-if="mixedContentBoxItem.requireRepackaging == false"><spring:message code='inventoryShipment.false' /></span>
												<input type="hidden" name="lineItem[{{$id}}].requireRepackaging" value="{{mixedContentBoxItem.requireRepackaging}}" />
											</td>											
										</c:when>
										<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
											<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">									  
												<td ng-class="{true: 'text-center', false: 'text-center active'}[mixedContentBox.indexOf(mixedContentBoxItem)==0]">
													<span ng-if="mixedContentBoxItem.requireRepackaging == true"><spring:message code='inventoryShipment.true' /></span>
													<span ng-if="mixedContentBoxItem.requireRepackaging == false"><spring:message code='inventoryShipment.false' /></span>
													<input type="hidden" name="lineItem[{{$id}}].requireRepackaging" value="{{mixedContentBoxItem.requireRepackaging}}" />
												</td>					
											</sec:authorize>
											<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
												<td ng-class="{true: 'text-center', false: 'text-center active'}[mixedContentBox.indexOf(mixedContentBoxItem)==0]">
													<input id="requireRepackaging{{$id}}" type="checkbox" name="lineItem[{{$id}}].requireRepackaging" ng-model="mixedContentBoxItem.requireRepackaging" ng-readonly="!$first" ng-change="assignRequireRepackaging(mixedContentBox)" >
												</td>
											</sec:authorize>
										</c:when>
										<c:otherwise>
											<td ng-class="{true: 'text-center', false: 'text-center active'}[mixedContentBox.indexOf(mixedContentBoxItem)==0]">
												<input id="requireRepackaging{{$id}}" type="checkbox" name="lineItem[{{$id}}].requireRepackaging" ng-model="mixedContentBoxItem.requireRepackaging" ng-readonly="!$first" ng-change="assignRequireRepackaging(mixedContentBox)" >
											</td>
										</c:otherwise>		
									</c:choose>
								<td class="text-center active"> 
									{{mixedContentBoxItem.cartonNumberStart}} ~ {{mixedContentBoxItem.cartonNumberEnd}}
								</td>
								<td ng-class="{true: 'text-center', false: 'text-center active'}[mixedContentBox.indexOf(mixedContentBoxItem)==0]">									
									<c:choose>
										<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
											{{mixedContentBoxItem.cartonDimensionCm1}} x {{mixedContentBoxItem.cartonDimensionCm2}} x {{mixedContentBoxItem.cartonDimensionCm3}}
											<input type="hidden" name="lineItem[{{$id}}].cartonDimensionCm1" value="{{mixedContentBoxItem.cartonDimensionCm1}}" />
											<input type="hidden" name="lineItem[{{$id}}].cartonDimensionCm2" value="{{mixedContentBoxItem.cartonDimensionCm2}}" />			
											<input type="hidden" name="lineItem[{{$id}}].cartonDimensionCm3" value="{{mixedContentBoxItem.cartonDimensionCm3}}" />
										</c:when>
										<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
											<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
												{{mixedContentBoxItem.cartonDimensionCm1}} x {{mixedContentBoxItem.cartonDimensionCm2}} x {{mixedContentBoxItem.cartonDimensionCm3}}
												<input type="hidden" name="lineItem[{{$id}}].cartonDimensionCm1" value="{{mixedContentBoxItem.cartonDimensionCm1}}" />
												<input type="hidden" name="lineItem[{{$id}}].cartonDimensionCm2" value="{{mixedContentBoxItem.cartonDimensionCm2}}" />			
												<input type="hidden" name="lineItem[{{$id}}].cartonDimensionCm3" value="{{mixedContentBoxItem.cartonDimensionCm3}}" />
											</sec:authorize>
											<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
												<input name="lineItem[{{$id}}].cartonDimensionCm1" class="form-control" style="width:20%;display: inline;padding: 6px 2px 6px 2px;text-align:right;" ng-model="mixedContentBoxItem.cartonDimensionCm1" ng-readonly="!$first" ng-change="assignCartonDimension(mixedContentBox)" ng-pattern="/^(?:[1-9]\d*)?(?:\.\d+)?$/" value="" type="text" size="3" required> x
												<input name="lineItem[{{$id}}].cartonDimensionCm2" class="form-control" style="width:20%;display: inline;padding: 6px 2px 6px 2px;text-align:right;" ng-model="mixedContentBoxItem.cartonDimensionCm2" ng-readonly="!$first" ng-change="assignCartonDimension(mixedContentBox)" ng-pattern="/^(?:[1-9]\d*)?(?:\.\d+)?$/" value="" type="text" size="3" required> x
												<input name="lineItem[{{$id}}].cartonDimensionCm3" class="form-control" style="width:20%;display: inline;padding: 6px 2px 6px 2px;text-align:right;" ng-model="mixedContentBoxItem.cartonDimensionCm3" ng-readonly="!$first" ng-change="assignCartonDimension(mixedContentBox)" ng-pattern="/^(?:[1-9]\d*)?(?:\.\d+)?$/" value="" type="text" size="3" required>						
												<div class="text-danger" ng-show="(InventoryShipment['lineItem[{{$id}}].cartonDimensionCm1'].$error.required && InventoryShipment['lineItem[{{$id}}].cartonDimensionCm1'].$dirty) || (InventoryShipment['lineItem[{{$id}}].cartonDimensionCm2'].$error.required && InventoryShipment['lineItem[{{$id}}].cartonDimensionCm2'].$dirty) || (InventoryShipment['lineItem[{{$id}}].cartonDimensionCm3'].$error.required && InventoryShipment['lineItem[{{$id}}].cartonDimensionCm3'].$dirty)">
													<spring:message code='inventoryShipment.cartonDimensions_req' />
												</div>
												<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].cartonDimensionCm1'].$error.pattern || InventoryShipment['lineItem[{{$id}}].cartonDimensionCm2'].$error.pattern || InventoryShipment['lineItem[{{$id}}].cartonDimensionCm3'].$error.pattern">
            										<spring:message code='inventoryShipment.cartonDimensions_format' />
        										</div>
											</sec:authorize>
										</c:when>
										<c:otherwise>
											<input name="lineItem[{{$id}}].cartonDimensionCm1" class="form-control" style="width:20%;display: inline;padding: 6px 2px 6px 2px;text-align:right;" ng-model="mixedContentBoxItem.cartonDimensionCm1" ng-readonly="!$first" ng-change="assignCartonDimension(mixedContentBox)" ng-pattern="/^(?:[1-9]\d*)?(?:\.\d+)?$/" value="" type="text" size="3" required> x
											<input name="lineItem[{{$id}}].cartonDimensionCm2" class="form-control" style="width:20%;display: inline;padding: 6px 2px 6px 2px;text-align:right;" ng-model="mixedContentBoxItem.cartonDimensionCm2" ng-readonly="!$first" ng-change="assignCartonDimension(mixedContentBox)" ng-pattern="/^(?:[1-9]\d*)?(?:\.\d+)?$/" value="" type="text" size="3" required> x
											<input name="lineItem[{{$id}}].cartonDimensionCm3" class="form-control" style="width:20%;display: inline;padding: 6px 2px 6px 2px;text-align:right;" ng-model="mixedContentBoxItem.cartonDimensionCm3" ng-readonly="!$first" ng-change="assignCartonDimension(mixedContentBox)" ng-pattern="/^(?:[1-9]\d*)?(?:\.\d+)?$/" value="" type="text" size="3" required>						
											<div class="text-danger" ng-show="(InventoryShipment['lineItem[{{$id}}].cartonDimensionCm1'].$error.required && InventoryShipment['lineItem[{{$id}}].cartonDimensionCm1'].$dirty) || (InventoryShipment['lineItem[{{$id}}].cartonDimensionCm2'].$error.required && InventoryShipment['lineItem[{{$id}}].cartonDimensionCm2'].$dirty) || (InventoryShipment['lineItem[{{$id}}].cartonDimensionCm3'].$error.required && InventoryShipment['lineItem[{{$id}}].cartonDimensionCm3'].$dirty)">
												<spring:message code='inventoryShipment.cartonDimensions_req' />
											</div>
											<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].cartonDimensionCm1'].$error.pattern || InventoryShipment['lineItem[{{$id}}].cartonDimensionCm2'].$error.pattern || InventoryShipment['lineItem[{{$id}}].cartonDimensionCm3'].$error.pattern">
            									<spring:message code='inventoryShipment.cartonDimensions_format' />
        									</div>
										</c:otherwise>		
									</c:choose>								
								</td>								
								<td ng-class="{true: 'text-center', false: 'text-center active'}[mixedContentBox.indexOf(mixedContentBoxItem)==0]">
									<c:choose>
										<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
											{{mixedContentBoxItem.perCartonGrossWeightKg}}
											<input type="hidden" name="lineItem[{{$id}}].perCartonGrossWeightKg" value="{{mixedContentBoxItem.perCartonGrossWeightKg}}" />
										</c:when>
										<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
											<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
												{{mixedContentBoxItem.perCartonGrossWeightKg}}
												<input type="hidden" name="lineItem[{{$id}}].perCartonGrossWeightKg" value="{{mixedContentBoxItem.perCartonGrossWeightKg}}" />
											</sec:authorize>
											<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
												<input name="lineItem[{{$id}}].perCartonGrossWeightKg" class="form-control" style="padding: 6px 2px 6px 2px;text-align:right;" ng-model="mixedContentBoxItem.perCartonGrossWeightKg" ng-readonly="!$first" ng-change="assignPerCartonGrossWeightKg(mixedContentBox)" ng-pattern="/^(0*[1-9][0-9]*(\.[0-9]+)?|0*\.[0-9]*[1-9][0-9]*)$/" value="" type="text" size="10" required></input>
												<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].perCartonGrossWeightKg'].$error.required && InventoryShipment['lineItem[{{$id}}].perCartonGrossWeightKg'].$dirty">
													<spring:message code='inventoryShipment.grossWeightPerCarton_req' />
												</div>
												<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].perCartonGrossWeightKg'].$error.pattern">
													<spring:message code='inventoryShipment.grossWeightPerCarton_format' />
												</div>
											</sec:authorize>
										</c:when>
										<c:otherwise>
											<input name="lineItem[{{$id}}].perCartonGrossWeightKg" class="form-control" style="padding: 6px 2px 6px 2px;text-align:right;" ng-model="mixedContentBoxItem.perCartonGrossWeightKg" ng-readonly="!$first" ng-change="assignPerCartonGrossWeightKg(mixedContentBox)" ng-pattern="/^(0*[1-9][0-9]*(\.[0-9]+)?|0*\.[0-9]*[1-9][0-9]*)$/" value="" type="text" size="10" required></input>
											<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].perCartonGrossWeightKg'].$error.required && InventoryShipment['lineItem[{{$id}}].perCartonGrossWeightKg'].$dirty">
												<spring:message code='inventoryShipment.grossWeightPerCarton_req' />
											</div>
											<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].perCartonGrossWeightKg'].$error.pattern">
												<spring:message code='inventoryShipment.grossWeightPerCarton_format' />
											</div>
										</c:otherwise>		
									</c:choose>
								</td>																																							
								<td class="text-center">
									<c:choose>
										<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
											{{mixedContentBoxItem.perCartonUnits}}
											<input type="hidden" name="lineItem[{{$id}}].perCartonUnits" value="{{mixedContentBoxItem.perCartonUnits}}" />
										</c:when>
										<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
											<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
												{{mixedContentBoxItem.perCartonUnits}}
												<input type="hidden" name="lineItem[{{$id}}].perCartonUnits" value="{{mixedContentBoxItem.perCartonUnits}}" />
											</sec:authorize>
											<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
												<input id="units{{$id}}" name="lineItem[{{$id}}].perCartonUnits" class="form-control" style="padding: 6px 2px 6px 2px;text-align:right;" ng-model="mixedContentBoxItem.perCartonUnits" ng-pattern="/^[1-9][0-9]*$/"  ng-change="calculateMixedContentBoxQuantity(this)" value="" type="text" size="3" required></input>																				
												<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].perCartonUnits'].$error.required && InventoryShipment['lineItem[{{$id}}].perCartonUnits'].$dirty">
													<spring:message code='inventoryShipment.unitsPerCarton_req' />
												</div>
												<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].perCartonUnits'].$error.pattern">
													<spring:message code='inventoryShipment.unitsPerCarton_format' />
												</div>
											</sec:authorize>
										</c:when>			
										<c:otherwise>
											<input id="units{{$id}}" name="lineItem[{{$id}}].perCartonUnits" class="form-control" style="padding: 6px 2px 6px 2px;text-align:right;" ng-model="mixedContentBoxItem.perCartonUnits" ng-pattern="/^[1-9][0-9]*$/"  ng-change="calculateMixedContentBoxQuantity(this)" value="" type="text" size="3" required></input>																				
											<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].perCartonUnits'].$error.required && InventoryShipment['lineItem[{{$id}}].perCartonUnits'].$dirty">
												<spring:message code='inventoryShipment.unitsPerCarton_req' />
											</div>
											<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].perCartonUnits'].$error.pattern">
												<spring:message code='inventoryShipment.unitsPerCarton_format' />
											</div>
										</c:otherwise>		
									</c:choose>
								</td>
								<td class="text-right active">
									{{$first?  mixedContentBoxItem.cartonCounts = mixedContentBoxCartonCountFirst : mixedContentBoxItem.cartonCounts = mixedContentBoxCartonCountOther}}
									<input type="hidden" id="number{{$id}}" name="lineItem[{{$id}}].cartonCounts" class="form-control" ng-model="mixedContentBoxItem.cartonCounts" value="{{mixedContentBoxItem.cartonCounts}}" type="text" ></input>
								</td>																							
								<td class="text-right active">
									{{mixedContentBoxItem.quantity}}
									<input type="hidden" id="quantity{{$id}}" name="lineItem[{{$id}}].quantity" ng-model="mixedContentBoxItem.quantity" value="{{mixedContentBoxItem.quantity}}" type="text" size="3"></input>
								</td>																		
								<td class="text-center">									
									<c:choose>
										<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
											{{mixedContentBoxItem.unitAmount}}
											<input type="hidden" name="lineItem[{{$id}}].unitAmount" value="{{mixedContentBoxItem.unitAmount}}" />
										</c:when>
										<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
											<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
												{{mixedContentBoxItem.unitAmount}}
												<input type="hidden" name="lineItem[{{$id}}].unitAmount" value="{{mixedContentBoxItem.unitAmount}}" />
											</sec:authorize>
											<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
												<input id="unitPrice{{$id}}" name="lineItem[{{$id}}].unitAmount" class="form-control" style="padding: 6px 2px 6px 2px;text-align:right;" ng-model="mixedContentBoxItem.unitAmount" ng-pattern="/^(?:[1-9]\d*)?(?:\.\d+)?$/" ng-change="calculateMixedContentBoxAmount(this)" value="" type="text" size="5" required></input>
												<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].unitAmount'].$error.required && InventoryShipment['lineItem[{{$id}}].unitAmount'].$dirty">
													<spring:message code='inventoryShipment.uniPrice_req' />
												</div>
												<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].unitAmount'].$error.pattern">
													<spring:message code='inventoryShipment.uniPrice_format' />
												</div>
											</sec:authorize>
										</c:when>										
										<c:otherwise>
											<input id="unitPrice{{$id}}" name="lineItem[{{$id}}].unitAmount" class="form-control" style="padding: 6px 2px 6px 2px;text-align:right;" ng-model="mixedContentBoxItem.unitAmount" ng-pattern="/^(?:[1-9]\d*)?(?:\.\d+)?$/" ng-change="calculateMixedContentBoxAmount(this)" value="" type="text" size="5" required></input>
											<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].unitAmount'].$error.required && InventoryShipment['lineItem[{{$id}}].unitAmount'].$dirty">
												<spring:message code='inventoryShipment.uniPrice_req' />
											</div>
											<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].unitAmount'].$error.pattern">
												<spring:message code='inventoryShipment.uniPrice_format' />
											</div>
										</c:otherwise>		
									</c:choose>
								</td>																	
								<td class="text-right active">
									{{mixedContentBoxItem.amountUntaxed}}
									<input type="hidden" id="amount{{$id}}" name="lineItem[{{$id}}].amountUntaxed" ng-model="mixedContentBoxItem.amountUntaxed" value="{{mixedContentBoxItem.amountUntaxed}}" type="text" size="8"></input>
								</td>																		
								<td>
									<c:choose>
										<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
											{{mixedContentBoxItem.guiinvoiceNumber}}
											<input type="hidden" name="lineItem[{{$id}}].GUIInvoiceNumber" value="{{mixedContentBoxItem.guiinvoiceNumber}}" />
										</c:when>
										<c:otherwise>
											<input id="GUIInvoiceNumber{{$id}}" name="lineItem[{{$id}}].GUIInvoiceNumber" class="form-control" style="display:inline;width:100%;padding: 6px 0px 6px 0px;text-align:center;" ng-required="mixedContentBoxItem.isGUIInvoiceIsRequired" ng-model="mixedContentBoxItem.guiinvoiceNumber" ng-pattern="/^[a-zA-Z0-9]+$/" ng-readonly="!mixedContentBoxItem.isGUIInvoiceEnable" type="text" size="5"></input><span ng-show="mixedContentBoxItem.isGUIInvoiceIsRequired" class="text-danger">*</span>
												<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].GUIInvoiceNumber'].$error.required && InventoryShipment['lineItem[{{$id}}].GUIInvoiceNumber'].$dirty">
													<spring:message code='inventoryShipment.GUIInvoiceNumber_req' />
												</div>
												<div class="text-danger" ng-show="InventoryShipment['lineItem[{{$id}}].GUIInvoiceNumber'].$error.pattern">
													<spring:message code='inventoryShipment.GUIInvoiceNumber_format' />
												</div>
										</c:otherwise>		
									</c:choose>
								</td>
								<td>
									<c:choose>
										<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
											{{mixedContentBoxItem.guifileName}}
											<input type="hidden" id="GUIFileName{{$id}}" name="lineItem[{{$id}}].GUIFileName" ng-model="mixedContentBoxItem.guifileName" value="{{mixedContentBoxItem.guifileName}}" type="text" size="50" ></input>
										</c:when>
										<c:otherwise>
											<input type="file" id="GUIInvoiceFile{{$id}}" name="lineItem[{{$id}}].GUIInvoiceFile"
											ng-model="mixedContentBoxItem.GUIInvoiceFile"
											ng-disabled="!mixedContentBoxItem.isGUIInvoiceEnable || mixedContentBoxItem.guifileName != null" ng-readonly="!mixedContentBoxItem.isGUIInvoiceEnable || mixedContentBoxItem.guifileName != null"><span ng-show="mixedContentBoxItem.isGUIInvoiceIsRequired" class="text-danger">*</span>

											<button type="button" class="btn btn-primary" ng-disabled="!mixedContentBoxItem.isGUIInvoiceEnable || mixedContentBoxItem.guifileName != null"
											ng-click="uploadGUIInvoiceFileInMixedBox($id,mixedContentBox,mixedContentBoxItem)">
												<span><spring:message code='inventoryShipment.upload' /></span>
											</button>
											{{mixedContentBoxItem.guifileName}}
											<button type="button" class="btn btn-link" style="padding:0px 12px;" ng-show="mixedContentBoxItem.guifileName != null"
													ng-click="removeGUIInvoiceFileInMixedBox(mixedContentBoxItem.guifileName,mixedContentBox,mixedContentBoxItem)">
													<span class="glyphicon glyphicon-remove"><spring:message code='inventoryShipment.remove' /></span>
											</button>
											<input type="hidden" id="GUIFileName{{$id}}" name="lineItem[{{$id}}].GUIFileName" ng-model="mixedContentBoxItem.guifileName" value="{{mixedContentBoxItem.guifileName}}" type="text" size="50" ></input>
										</c:otherwise>		
									</c:choose>
								</td>									
								<td>
									<c:choose>
										<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
										</c:when>
										<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
											<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
											</sec:authorize>
											<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
												<input id="remove{{$id}}" class="btn btn-default btn-sm" type="button" value="<spring:message code='inventoryShipment.remove'/>" ng-click="removeMixedContentBoxLineItem(mixedContentBox,mixedContentBoxItem)" ng-mouseover="removeSKU=true" ng-mouseleave="removeSKU=false">
											</sec:authorize>
										</c:when>	
										<c:otherwise>
											<input id="remove{{$id}}" class="btn btn-default btn-sm" type="button" value="<spring:message code='inventoryShipment.remove'/>" ng-click="removeMixedContentBoxLineItem(mixedContentBox,mixedContentBoxItem)" ng-mouseover="removeSKU=true" ng-mouseleave="removeSKU=false">
										</c:otherwise>		
									</c:choose>
									<span class="row text-danger" ng-show="!atLeastOneSKUWarning"><spring:message code='inventoryShipment.atLeastOneSKU'/></span>
								</td>
							</tr>
						</tbody>								
							<tr>
								<td colspan="13">
									<c:choose>
										<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
										</c:when>
										<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
											<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
											</sec:authorize>
											<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
												<input class="btn btn-default" id="add" type="button" value="<spring:message code='inventoryShipment.add'/>" style="float: right" ng-click="addMixedContentBoxLineItem(mixedContentBox)" />
											</sec:authorize>
										</c:when>
										<c:otherwise>
											<input class="btn btn-default" id="add" type="button" value="<spring:message code='inventoryShipment.add'/>" style="float: right" ng-click="addMixedContentBoxLineItem(mixedContentBox)" />
										</c:otherwise>		
									</c:choose>
								</td>
							</tr>
								
						</table>
					</td>
				</tr>					
				<tr>
					<td colspan="13">
						<c:choose>
							<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
							</c:when>							
							<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
								<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
								</sec:authorize>
								<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
									<input class="btn btn-default" id="add" type="button" value="<spring:message code='inventoryShipment.addMixedContentBox' />" style="float: right" ng-click="addMixedContentBox()" />
								</sec:authorize>
							</c:when>
							<c:otherwise>
								<input class="btn btn-default" id="add" type="button" value="<spring:message code='inventoryShipment.addMixedContentBox' />" style="float: right" ng-click="addMixedContentBox()" />	
							</c:otherwise>		
						</c:choose>
					</td>
				</tr>																								
				</tbody>
					<tr>
						<td colspan="8"></td>
						<td class="text-right">
							<b><spring:message code='inventoryShipment.subtotal' /></b>
						</td>
						<td class="text-right active">
							{{subtotal}}
							<form:hidden id="subtotal" path="subtotal" ng-model="subtotal" size="8" value="{{subtotal}}" />
						</td>
					</tr>
					<tr>
						<td colspan="7"></td>
						<td colspan="2" class="text-right">
							<c:choose>
								<c:when test="${InventoryShipment.status eq 'SHPT_CONFIRMED' || InventoryShipment.status eq 'SHPT_AWAIT_PICK_UP' || InventoryShipment.status eq 'SHPT_IN_TRANSIT' || InventoryShipment.status eq 'SHPT_RECEIVING' || InventoryShipment.status eq 'SHPT_RECEIVED' || InventoryShipment.status eq 'SHPT_EXCEPTION'}">
									<b><spring:message code='inventoryShipment.taxAmount' /> ( ${InventoryShipment.salesTaxPercentage} <form:hidden path="salesTaxPercentage" />%)</b>
								</c:when>
								<c:when test="${InventoryShipment.status eq 'SHPT_PLANNING'}">
									<sec:authorize access="hasAnyRole('${auth['SUPPLIER_USER']}')">
										<b><spring:message code='inventoryShipment.taxAmount' /> ( ${InventoryShipment.salesTaxPercentage} <form:hidden path="salesTaxPercentage" />%)</b>
									</sec:authorize>
									<sec:authorize access="hasAnyRole('${auth['DRS_USER']}')">
										<b><spring:message code='inventoryShipment.taxAmount' /> ( <form:input id="salesTaxPercentage" class="form-control" style="display:inline;width:25%;padding: 6px 2px 6px 2px;text-align:right;" path="salesTaxPercentage" ng-model="salesTaxPercentage" ng-pattern="/^(?:[0-9]\d*)?(?:\.\d+)?$/" ng-change="changeSalesTaxPercentage()" required="required" /> %)</b>
									</sec:authorize>
								</c:when>
								<c:otherwise>
									<b><spring:message code='inventoryShipment.taxAmount' /><span class="text-danger">*</span> ( <form:input id="salesTaxPercentage" class="form-control" style="display:inline;width:25%;padding: 6px 2px 6px 2px;text-align:right;" path="salesTaxPercentage" ng-model="salesTaxPercentage" ng-pattern="/^(?:[0-9]\d*)?(?:\.\d+)?$/" ng-change="changeSalesTaxPercentage()" required="required" /> %)</b>
								</c:otherwise>		
							</c:choose>							
							<div class="text-danger" ng-show="InventoryShipment.salesTaxPercentage.$error.required && InventoryShipment.salesTaxPercentage.$dirty">
      	 						<spring:message code='inventoryShipment.salesTaxPercentage_req'/>
							</div>
							<div class="text-danger" ng-show="InventoryShipment.salesTaxPercentage.$error.pattern">
								<spring:message code="inventoryShipment.salesTaxPercentage_format" />
							</div>
						</td>
						<td class="text-right active">
							{{taxAmount}}
							<form:hidden id="taxAmount" path="salesTax" ng-model="taxAmount" size="8" value="{{taxAmount}}" /></td>
					</tr>
					<tr>
						<td colspan="5"></td>
						<td class="text-right">
							<b><spring:message code='inventoryShipment.total' /></b>
						</td>
						<td class="text-right active">
							{{totalCartonCount}}
						</td>						
						<td class="text-right active">
							{{totalQuantity}}
						</td>												
						<td class="active">							
						</td>
						<td class="text-right active">
							{{totalAmount}}
							<form:hidden id="totalAmount" path="total" ng-model="totalAmount" size="8" value="{{totalAmount}}" />
						</td>
					</tr>
				</table>				
				</div>
			</div>
			<div style="padding-bottom: 20px"></div>
		<!--	<h1>{{InventoryShipment.$invalid}}</h1> -->
			<!--<div>
            <h1>{{ InventoryShipment| json }}</h1>
            </div>-->

			<c:choose>
					<c:when test="${type eq 'Create'}">
						<div style="float: right">
							<input class="btn btn-primary" type="submit" onclick="document.pressed=this.name" name="saveDraft" value="<spring:message code="inventoryShipment.saveDraft" />" ng-disabled='duplicated || !noSKU || FCAPriceNoneEqual || InventoryShipment.$invalid' />
						</div>
					</c:when>
					<c:otherwise>
						<c:choose>
							<c:when test="${status eq 'DRAFT'}">														
						<div style="float: right">		
							<input class="btn btn-primary" type="submit"
							onclick="document.pressed=this.name"
							name="updateDraft" value="<spring:message code="inventoryShipment.submit" />"
							ng-disabled='duplicated || !noSKU || FCAPriceNoneEqual || InventoryShipment.$invalid' />
							<a class="btn btn-link" href="${pageContext.request.contextPath}/InventoryShipments/${InventoryShipment.name}"><spring:message code="inventoryShipment.cancel" /></a>
						</div>
							</c:when>
							<c:otherwise>
						<div style="float: right">
							<sec:authorize access="hasAnyRole('${auth['INVENTORY_SHIPMENTS_DEPOSITION']}')">
							<a class="btn btn-link" href="<c:url value="/resources/files/G3-deposition-GUI.pdf"/>" target="_blank">
								<spring:message code="inventoryShipment.deposition" />
							</a>
							</sec:authorize>
							<input class="btn btn-primary" type="submit"
							onclick="document.pressed=this.name"
							name="update" value="<spring:message code="inventoryShipment.submit" />" ng-disabled='duplicated || !noSKU || FCAPriceNoneEqual || InventoryShipment.$invalid' />
							<a class="btn btn-link" href="${pageContext.request.contextPath}/InventoryShipments/${InventoryShipment.name}"><spring:message code="inventoryShipment.cancel" /></a>								
						</div>						
							</c:otherwise>	
						</c:choose>								
					</c:otherwise>
				</c:choose>			
		</form:form>
		<div class="row">
			<div class="col-md-12 text-danger">
				<spring:message code='inventoryShipment.note' />
			</div>
		</div>	
	</div>
</div>
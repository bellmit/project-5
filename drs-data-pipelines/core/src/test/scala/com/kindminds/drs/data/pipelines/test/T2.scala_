package com.kindminds.drs.data.pipelines.test


/*
 * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>
 */

package docs.scaladsl


case class User2( id:Int , name:String , age:Int )
case class Color(name: String, red: String, green: String, blue: String)

case class MSActivity(country: String,code: String,name: String,done_by: String,
                    start_date: String,end_date: String,platform: String, activity: String,
                      initial_amount: String,budget_final_amount: String, discount: String,
                      unit_of_measure: String,details: String,link_1: String, link_2: String,
                      link_3: String,link_4: String,link_5: String, link_6: String,
                      link_7: String,link_8: String,link_9: String,link_10: String,
                    considerations_problem_to_solve:String,original_text: String,new_text: String,suggestions_for_Supplier: String)


import java.nio.file.{Path, Paths}

import akka.actor.ActorSystem
import akka.stream.alpakka.csv.scaladsl.{CsvParsing, CsvToMap}
import akka.stream.{ActorMaterializer, IOResult}
import akka.stream.alpakka.mongodb.DocumentUpdate
import akka.stream.alpakka.mongodb.scaladsl.MongoSink
import akka.stream.scaladsl.{FileIO, Keep, Sink, Source}
import akka.stream.testkit.scaladsl.StreamTestKit.assertAllStagesStopped
import akka.util.ByteString
import com.kindminds.drs.data.pipelines.test.FetchHttpEvery30SecondsAndConvertCsvToJsonToKafka.fileSink
import com.mongodb.client.model.{Filters, InsertManyOptions, Updates}
import com.mongodb.reactivestreams.client.{FindPublisher, MongoClients, MongoCollection}
import org.bson.Document
import org.bson.codecs.configuration.CodecRegistries.{fromProviders, fromRegistries}
import org.mongodb.scala.bson.codecs.DEFAULT_CODEC_REGISTRY
import org.mongodb.scala.bson.codecs.Macros._
import org.scalatest._
import org.scalatest.concurrent.ScalaFutures
import spray.json.{DefaultJsonProtocol, JsValue, JsonWriter}

import scala.collection.JavaConverters._
import scala.concurrent.Future
import scala.concurrent.duration._

class MongoSinkSpec
  extends WordSpec
    with ScalaFutures
    with BeforeAndAfterEach
    with BeforeAndAfterAll
    with MustMatchers
with DefaultJsonProtocol{

  // case class and codec for mongodb macros
  //case class Number(_id: Int)

  val codecRegistry = fromRegistries(fromProviders(classOf[MSActivity]), DEFAULT_CODEC_REGISTRY)

  implicit val system = ActorSystem()
  implicit val mat = ActorMaterializer()

  //override protected def beforeAll(): Unit =
  //Source.fromPublisher(db.drop()).runWith(Sink.head).futureValue

  private val client = MongoClients.create("mongodb://test:zse4rfv@35.221.131.190:27017/MongoSinkSpec")

  private val db = client.getDatabase("MongoSinkSpec").withCodecRegistry(codecRegistry)

  private val numbersColl: MongoCollection[MSActivity] =
    db.getCollection("numbersSink7", classOf[MSActivity]).withCodecRegistry(codecRegistry)

  private val numbersDocumentColl = db.getCollection("numbersSink")

  implicit val defaultPatience =
    PatienceConfig(timeout = 5.seconds, interval = 50.millis)

  // override def afterEach(): Unit =
  // Source.fromPublisher(numbersDocumentColl.deleteMany(new Document())).runWith(Sink.head).futureValue

  override def afterAll(): Unit =
    system.terminate().futureValue

  val testRange = 0 until 10

  def cleanseCsvData(csvData: Map[String, ByteString]): Map[String, String] =
    csvData
      .filterNot { case (key, _) => key.isEmpty }
      .mapValues(_.utf8String)

  def toJson(map: Map[String, String])(
    implicit jsWriter: JsonWriter[Map[String, String]]): JsValue = jsWriter.write(map)

  def insertTestRange(): Unit =
    Source
      .fromPublisher(numbersDocumentColl.insertMany(
        testRange.map(i => Document.parse(s"""{"value":$i }""")).asJava))
      .runWith(Sink.head)
      .futureValue

  "MongoSinkSpec" must {

    /*
    "save with insertOne" in assertAllStagesStopped {
      val source = Source(testRange).map(i => Document.parse(s"""{"value":$i}"""))
      val completion = source.runWith(MongoSink.insertOne(numbersDocumentColl))

      completion.futureValue

      //val found = Source.fromPublisher(numbersDocumentColl.find()).runWith(Sink.seq).futureValue

      //found.map(_.getInteger("value")) must contain theSameElementsAs testRange
    }
    */

    "save with insertOne and codec support" in assertAllStagesStopped {

      /*
      val sheetsUtil: ImportGoogleSheetsUtil = new ImportGoogleSheetsUtil

      val spreadsheetId: String = "1SppsAXiRYM8NGooFNRfi7uR75JO-q1Cwwu4iGsoFD1M"
      val sheetRange: String = "LatestSellbackData!A2:D"
    */

      val fileSink: Sink[ByteString, Future[IOResult]] = // (2)
        FileIO.toPath(Paths.get("/home/arthur/out.txt"))

      val file = Paths.get("/home/arthur/DRS Activity & Contact Log - ActivityLog (2).csv")
     val f: Source[ByteString, Future[IOResult]] =  FileIO.fromPath(file)




      /*
      object MyJsonProtocol extends DefaultJsonProtocol {
        implicit val activityFormat = jsonFormat4(MSActivity)
      }

      import MyJsonProtocol._
      import spray.json._
*/
//
      //val json = Color("CadetBlue", 95, 158, 160).toJson
      //val color = json.convertTo[Color]

    //  implicit val activityFormat = jsonFormat4(MSActivity)



      f.via(CsvParsing.lineScanner())
      .via(CsvToMap.toMap())                                       //: Map[String, ByteString] (5)
      .map(cleanseCsvData)                                         //: Map[String, String]     (6)
        .map(x=>{
        MSActivity(x.get("country").get,"","","","","","","","","","","","","","","","","","","","","","","","","","")
      })
        //.runForeach(y=>{
       // println(y.country)
      //})
      //.map(toJson)                                                 //: JsValue                 (7)
      //.map(x =>{
       // x.convertTo[MSActivity]
     // }).                                       //: String (JSON formatted)
       . runWith(
          MongoSink.insertOne(numbersColl)
        ).futureValue


      // val values: util.List[util.List[AnyRef]] = sheetsUtil.importSheetData(spreadsheetId, sheetRange)
      // #insert-one
      /*
      val userList = Seq(User2(1, "Ann" ,2  ) , User2(2 , "Lewis"  , 3) , User2( 4 , "Jordan" , 5 ))
      val source = Source(userList.toList)
      source.runForeach(x=>{
        println(x.id)
      })

      source.runWith(
        MongoSink.insertOne(numbersColl)
      ).futureValue
      // #insert-one

*/
     // val found = Source.fromPublisher(numbersColl.find()).runWith(Sink.seq).futureValue

      // val z: FindPublisher[Number] = numbersColl.find()


     // println(found.size)
     // println(found.size)
     // println(found.size)

      // found must contain theSameElementsAs testRangeObjects
    }


  }

}
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.06.10 at 11:40:51 PM CST 
//


package com.kindminds.drs.mws.xml;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for GdprRiskType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="GdprRiskType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="manufacturer_website_registration"/&gt;
 *     &lt;enumeration value="no_electronic_information_stored"/&gt;
 *     &lt;enumeration value="user_setting_information_storage"/&gt;
 *     &lt;enumeration value="pin_or_biometric_recognition_lock"/&gt;
 *     &lt;enumeration value="cloud_account_connectivity"/&gt;
 *     &lt;enumeration value="physical_or_cloud_data_storage"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "GdprRiskType")
@XmlEnum
public enum GdprRiskType {

    @XmlEnumValue("manufacturer_website_registration")
    MANUFACTURER___WEBSITE___REGISTRATION("manufacturer_website_registration"),
    @XmlEnumValue("no_electronic_information_stored")
    NO___ELECTRONIC___INFORMATION___STORED("no_electronic_information_stored"),
    @XmlEnumValue("user_setting_information_storage")
    USER___SETTING___INFORMATION___STORAGE("user_setting_information_storage"),
    @XmlEnumValue("pin_or_biometric_recognition_lock")
    PIN___OR___BIOMETRIC___RECOGNITION___LOCK("pin_or_biometric_recognition_lock"),
    @XmlEnumValue("cloud_account_connectivity")
    CLOUD___ACCOUNT___CONNECTIVITY("cloud_account_connectivity"),
    @XmlEnumValue("physical_or_cloud_data_storage")
    PHYSICAL___OR___CLOUD___DATA___STORAGE("physical_or_cloud_data_storage");
    private final String value;

    GdprRiskType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static GdprRiskType fromValue(String v) {
        for (GdprRiskType c: GdprRiskType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}

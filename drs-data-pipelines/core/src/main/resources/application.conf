


drs {
  hadoop {
    conf = "/home/servicedesk"
    #conf = "/home/arthur"
    #conf = "/Users/arthur"
    #conf= "C:\\Users\\Ralph Lin"

  }
  firefox{
    driver = "/home/servicedesk/driver/geckodriver"
    #driver = "/home/arthur/Downloads/geckodriver"
  }
  amazon{
    eurptpath ="/home/servicedesk/amazon_eu_rpt_temp/"
    narptpath ="/home/servicedesk/amazon_rpt_temp/"

    #eurptpath ="/home/arthur/amazon_eu_rpt_temp/"
    #narptpath ="/home/arthur/amazon_rpt_temp/"
  }

}



# Load using SlickSession.forConfig("slick-postgres")
slick-postgres {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    dataSourceClass = "slick.jdbc.DriverDataSource"
    properties = {
      driver = "org.postgresql.Driver"
      url = "jdbc:postgresql://drs.crghoygbfshk.ap-northeast-1.rds.amazonaws.com:5432/drs?assumeMinServerVersion=9.0"
      #url = "jdbc:postgresql://localhost:5432/drs"
      user = drs
      password = "phi42PrlGo6p"
    }
    queueSize = 10000
    maxConnections = 10
    numThreads = 2
  }
}


akka {
   extensions = ["akka.cluster.pubsub.DistributedPubSub"]
    loglevel = "INFO"
    stdout-loglevel = "INFO"
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

    actor.debug.autoreceive = on
    actor.debug.lifecycle = on


  quartz {
    defaultTimezone = "Asia/Taipei"
    schedules {
      cronRefreshAllOrders {
        expression = "0 3,8,13,18,23,28,33,38,43,48,53,58 * ? * *"
      }
      cronRefreshMissingAllOrders {
        expression = "0 1,11,21,31,41,51 * ? * *"
      }
      cronDailySales {
        expression = "0 59 * ? * *"
      }

      cronCheckCp {
        expression = "0 0 14 * * ?"
      }
      cronCheckSt {
        expression = "0 01 14 * * ?"
      }
      cronCheckHc {
        expression = "0 03 14 * * ?"
      }
      cronCheckHk {
        expression = "0 04 14 * * ?"
      }
      cronCheckBpt {
        expression = "0 30 09 * * ?"
      }
      cronCheckPt {
        expression = "0 32 09 * * ?"
      }
      cronCheckCr {
        expression = "0 03 11 ? * TUE"
      }
      cronCheckPsv {
        expression = "0 30 14 ? * THU"
      }
      cronCheckPd {
        expression = "0 1 7 3 * ?"
      }
      cronCheckMfi {
        expression = "0 04 12 ? * MON"
      }
      cronCheckInv {
        expression = "0 01 12 ? * MON"
      }


    }
  }

    actor {

      provider = "akka.cluster.ClusterActorRefProvider"

      allow-java-serialization = on

      serializers {
        java = "akka.serialization.JavaSerializer"
      }

      serialization-bindings {
        "java.lang.String" = java
      }

    }

    #remote {
     # log-remote-lifecycle-events = on
      #netty.tcp {
       # hostname = "127.0.0.1"
        #hostname = "10.0.0.39"
       # port = 2551
      #}
    #}

  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      #hostname = "10.0.0.39"
      #hostname = "10.0.0.186"
      port = 2551
    }
  }

  cluster {
    seed-nodes = [
    #"akka://drsDP@10.0.0.243:2551" ,"akka://drsDP@10.0.0.246:2551"]
    #"akka.tcp://drsDP@127.0.0.1:5001"]
      "akka://drsDP@127.0.0.1:2551"]

     # auto-down-unreachable-after = 10s
     downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    }
}





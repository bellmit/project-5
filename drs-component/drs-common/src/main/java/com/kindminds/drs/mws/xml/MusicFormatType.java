//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.06.10 at 11:40:51 PM CST 
//


package com.kindminds.drs.mws.xml;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for MusicFormatType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="MusicFormatType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="authorized_bootleg"/&gt;
 *     &lt;enumeration value="bsides"/&gt;
 *     &lt;enumeration value="best_of"/&gt;
 *     &lt;enumeration value="box_set"/&gt;
 *     &lt;enumeration value="original_recording"/&gt;
 *     &lt;enumeration value="reissued"/&gt;
 *     &lt;enumeration value="remastered"/&gt;
 *     &lt;enumeration value="soundtrack"/&gt;
 *     &lt;enumeration value="special_edition"/&gt;
 *     &lt;enumeration value="special_limited_edition"/&gt;
 *     &lt;enumeration value="cast_recording"/&gt;
 *     &lt;enumeration value="compilation"/&gt;
 *     &lt;enumeration value="deluxe_edition"/&gt;
 *     &lt;enumeration value="digital_sound"/&gt;
 *     &lt;enumeration value="double_lp"/&gt;
 *     &lt;enumeration value="explicit_lyrics"/&gt;
 *     &lt;enumeration value="hi-fidelity"/&gt;
 *     &lt;enumeration value="import"/&gt;
 *     &lt;enumeration value="limited_collectors_edition"/&gt;
 *     &lt;enumeration value="limited_edition"/&gt;
 *     &lt;enumeration value="remixes"/&gt;
 *     &lt;enumeration value="live"/&gt;
 *     &lt;enumeration value="extra_tracks"/&gt;
 *     &lt;enumeration value="cutout"/&gt;
 *     &lt;enumeration value="cd_and_dvd"/&gt;
 *     &lt;enumeration value="dual_disc"/&gt;
 *     &lt;enumeration value="hybrid_sacd"/&gt;
 *     &lt;enumeration value="cd-single"/&gt;
 *     &lt;enumeration value="maxi_single"/&gt;
 *     &lt;enumeration value="sacd"/&gt;
 *     &lt;enumeration value="minidisc"/&gt;
 *     &lt;enumeration value="uk_import"/&gt;
 *     &lt;enumeration value="us_import"/&gt;
 *     &lt;enumeration value="jp_import"/&gt;
 *     &lt;enumeration value="enhanced"/&gt;
 *     &lt;enumeration value="clean"/&gt;
 *     &lt;enumeration value="copy_protected_cd"/&gt;
 *     &lt;enumeration value="double_lp"/&gt;
 *     &lt;enumeration value="soundtrack"/&gt;
 *     &lt;enumeration value="cd-single"/&gt;
 *     &lt;enumeration value="remastered"/&gt;
 *     &lt;enumeration value="box_set"/&gt;
 *     &lt;enumeration value="double_cd"/&gt;
 *     &lt;enumeration value="karaoke"/&gt;
 *     &lt;enumeration value="limited_edition"/&gt;
 *     &lt;enumeration value="maxi_single"/&gt;
 *     &lt;enumeration value="mp3_audio"/&gt;
 *     &lt;enumeration value="ringle"/&gt;
 *     &lt;enumeration value="cd_and_dvd"/&gt;
 *     &lt;enumeration value="shm_cd"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "MusicFormatType")
@XmlEnum
public enum MusicFormatType {

    @XmlEnumValue("authorized_bootleg")
    AUTHORIZED___BOOTLEG("authorized_bootleg"),
    @XmlEnumValue("bsides")
    BSIDES("bsides"),
    @XmlEnumValue("best_of")
    BEST___OF("best_of"),
    @XmlEnumValue("box_set")
    BOX___SET("box_set"),
    @XmlEnumValue("original_recording")
    ORIGINAL___RECORDING("original_recording"),
    @XmlEnumValue("reissued")
    REISSUED("reissued"),
    @XmlEnumValue("remastered")
    REMASTERED("remastered"),
    @XmlEnumValue("soundtrack")
    SOUNDTRACK("soundtrack"),
    @XmlEnumValue("special_edition")
    SPECIAL___EDITION("special_edition"),
    @XmlEnumValue("special_limited_edition")
    SPECIAL___LIMITED___EDITION("special_limited_edition"),
    @XmlEnumValue("cast_recording")
    CAST___RECORDING("cast_recording"),
    @XmlEnumValue("compilation")
    COMPILATION("compilation"),
    @XmlEnumValue("deluxe_edition")
    DELUXE___EDITION("deluxe_edition"),
    @XmlEnumValue("digital_sound")
    DIGITAL___SOUND("digital_sound"),
    @XmlEnumValue("double_lp")
    DOUBLE___LP("double_lp"),
    @XmlEnumValue("explicit_lyrics")
    EXPLICIT___LYRICS("explicit_lyrics"),
    @XmlEnumValue("hi-fidelity")
    HI___FIDELITY("hi-fidelity"),
    @XmlEnumValue("import")
    IMPORT("import"),
    @XmlEnumValue("limited_collectors_edition")
    LIMITED___COLLECTORS___EDITION("limited_collectors_edition"),
    @XmlEnumValue("limited_edition")
    LIMITED___EDITION("limited_edition"),
    @XmlEnumValue("remixes")
    REMIXES("remixes"),
    @XmlEnumValue("live")
    LIVE("live"),
    @XmlEnumValue("extra_tracks")
    EXTRA___TRACKS("extra_tracks"),
    @XmlEnumValue("cutout")
    CUTOUT("cutout"),
    @XmlEnumValue("cd_and_dvd")
    CD___AND___DVD("cd_and_dvd"),
    @XmlEnumValue("dual_disc")
    DUAL___DISC("dual_disc"),
    @XmlEnumValue("hybrid_sacd")
    HYBRID___SACD("hybrid_sacd"),
    @XmlEnumValue("cd-single")
    CD___SINGLE("cd-single"),
    @XmlEnumValue("maxi_single")
    MAXI___SINGLE("maxi_single"),
    @XmlEnumValue("sacd")
    SACD("sacd"),
    @XmlEnumValue("minidisc")
    MINIDISC("minidisc"),
    @XmlEnumValue("uk_import")
    UK___IMPORT("uk_import"),
    @XmlEnumValue("us_import")
    US___IMPORT("us_import"),
    @XmlEnumValue("jp_import")
    JP___IMPORT("jp_import"),
    @XmlEnumValue("enhanced")
    ENHANCED("enhanced"),
    @XmlEnumValue("clean")
    CLEAN("clean"),
    @XmlEnumValue("copy_protected_cd")
    COPY___PROTECTED___CD("copy_protected_cd"),
    @XmlEnumValue("double_cd")
    DOUBLE___CD("double_cd"),
    @XmlEnumValue("karaoke")
    KARAOKE("karaoke"),
    @XmlEnumValue("mp3_audio")
    MP_3___AUDIO("mp3_audio"),
    @XmlEnumValue("ringle")
    RINGLE("ringle"),
    @XmlEnumValue("shm_cd")
    SHM___CD("shm_cd");
    private final String value;

    MusicFormatType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static MusicFormatType fromValue(String v) {
        for (MusicFormatType c: MusicFormatType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}

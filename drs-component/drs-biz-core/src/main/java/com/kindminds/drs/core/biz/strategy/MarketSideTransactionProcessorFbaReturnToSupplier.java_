package com.kindminds.drs.core.biz.strategy;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.kindminds.drs.api.data.access.rdb.shipment.ShipmentSkuIdentificationDao;
import com.kindminds.drs.api.v1.model.accounting.MarketSideTransaction;
import com.kindminds.drs.api.v1.model.inventory.SkuShipmentStockAllocator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.Assert;

import com.kindminds.drs.api.v1.model.accounting.DrsTransaction.DrsTransactionLineItem;
import com.kindminds.drs.api.v1.model.accounting.DrsTransaction.DrsTransactionType;
import com.kindminds.drs.Currency;
import com.kindminds.drs.Marketplace;
import com.kindminds.drs.TransactionLineType;

import com.kindminds.drs.api.data.access.rdb.accounting.DrsTransactionDao;
import com.kindminds.drs.v1.model.impl.DrsTransactionLineItemSvcImpl;
import com.kindminds.drs.v1.model.impl.DrsTransactionSvcImpl;

@Component
public class MarketSideTransactionProcessorFbaReturnToSupplier extends MarketSideTransactionProcessor {
	
	@Autowired private DrsTransactionDao dtRepo;
	@Autowired private SkuShipmentStockAllocator stockAllocator;
	@Autowired private ShipmentSkuIdentificationDao skuIdentifyDao;
	
	@Override
	public List<Integer> process(Date periodStart, Date periodEnd, MarketSideTransaction transaction) {

		Assert.isTrue(DrsTransactionType.containsType(transaction.getType()),"DrsTransactionType.containsType(transaction.getType())");

		Marketplace sourceMarketplace = Marketplace.fromName(transaction.getSource());
		String drsSku = transaction.getSku();
		String msdcKcode = this.dao.queryMsdcKcode(sourceMarketplace.getCountry());
		String splrKcode = this.dao.querySupplierKcode(drsSku);
		String hdlrKcode = this.dao.queryHandlerDrsKcode(splrKcode);

		Integer quantity = this.dao.queryFbaReturnToSupplierQuantity(transaction.getTransactionDate(),
				sourceMarketplace.getName(),drsSku);

		//todo arthur
		//skuIdentifyDao.queryCanBeSoldBack()


		//todo arthur system auto allocate ?
		String ivsName = this.dao.queryFbaReturnToSupplierIvsName(transaction.getTransactionDate(),
				sourceMarketplace.getName(),drsSku);
		String unsName = this.dao.queryFbaReturnToSupplierUnsName(transaction.getTransactionDate(),
				sourceMarketplace.getName(),drsSku);

		//update stock quantity, if ivs empty, then move onto the next ivs
//		updateStockQtyAccountForOverFlow(drsSku, ivsName, quantity);
		Marketplace.fromName(transaction.getSource()).getUnsDestinationCountry();

		//todo arthur have to modify
		stockAllocator.updateQuantityReturnToSupplierAllowOverflow(ivsName, unsName, drsSku, quantity);



		BigDecimal fcaPayment = this.getFcaPayment(ivsName, drsSku);
		Currency fcaCurrency = this.dao.queryShipmentCurrency(ivsName);
//		Assert.isTrue(Currency.USD==this.dao.queryShipmentCurrency(unsName),"Currency.USD==this.dao.queryShipmentCurrency(unsName)");

		List<Integer> resultIds = new ArrayList<>();
		for(int i=0;i<quantity;i++){

			DrsTransactionSvcImpl dt = new DrsTransactionSvcImpl(
					transaction.getType(),transaction.getTransactionDate(),i+1,
					drsSku,1,sourceMarketplace,transaction.getSourceId(),ivsName,unsName);

			int lineSeq=1;
			List<DrsTransactionLineItem> items = new ArrayList<DrsTransactionLineItem>();
			items.add(new DrsTransactionLineItemSvcImpl(lineSeq++,msdcKcode,hdlrKcode,TransactionLineType.MS2SS_PRODUCT_INVENTORY_RETURN.getName(),Currency.USD.name(),BigDecimal.ZERO));
			items.add(new DrsTransactionLineItemSvcImpl(lineSeq++,hdlrKcode,splrKcode,TransactionLineType.SS2SP_UNIT_INVENTORY_PAYMENT.getName(),   fcaCurrency.name(),fcaPayment));
			String sellbackType = getSellbackType(transaction.getType());
			items.add(new DrsTransactionLineItemSvcImpl(lineSeq++,hdlrKcode,splrKcode, sellbackType, fcaCurrency.name(),fcaPayment.negate()));
			dt.setSettleableItemList(items);

			int dtId = this.dtRepo.insert(dt);

			//todo arthur

			resultIds.add(dtId);
		}

		return resultIds;
	}

//	private void updateStockQtyAccountForOverFlow(String drsSku, String ivsName, Integer quantity) {
//		List<Object[]> ivsUnsList = dao.queryFBAIvsUnsListBySku(drsSku, ivsName);
//		Integer remainingQty = quantity;
//
//		for (Object[] ivsUns : ivsUnsList) {
//			ivsName = (String) ivsUns[0];
//			String unsName = (String) ivsUns[1];
//			remainingQty = stockAllocator.updateQuantityReturnToSupplier(
//					ivsName, unsName, drsSku, remainingQty);
//
//			if (remainingQty <= 0) break;
//		}
//
//		Assert.isTrue(remainingQty <= 0,
//				"UNS does not have enough stock. quantity needed: " + remainingQty);
//	}
	
	private String getSellbackType(String transactionType) {
		if (transactionType.equalsIgnoreCase("FBA Returns Taiwan")) {
			return TransactionLineType.SS2SP_INVENTORY_SELL_BACK_TAIWAN.getName();
		} else if (transactionType.equalsIgnoreCase("FBA Returns Other")) {
			return TransactionLineType.SS2SP_INVENTORY_SELL_BACK_OTHER.getName();
		} else if (transactionType.equalsIgnoreCase("FBA Returns Dispose")) {
			return TransactionLineType.SS2SP_INVENTORY_SELL_BACK_DISPOSE.getName();
		} 
		return TransactionLineType.SS2SP_UNIT_INVENTORY_SELL_BACK.getName();
	}
	
	private BigDecimal getFcaPayment(String ivsName,String drsSku){
		BigDecimal taxExcludedFcaAmount = this.dao.queryTaxExcludedFcaAmount(ivsName,drsSku);
		BigDecimal salesTaxRate = this.dao.querySalesTaxRate(ivsName);
		BigDecimal salesTax = taxExcludedFcaAmount.multiply(salesTaxRate);
		return taxExcludedFcaAmount.add(salesTax);
	}

}

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.06.10 at 11:40:51 PM CST 
//


package com.kindminds.drs.mws.xml;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for TimeUnitOfMeasure.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="TimeUnitOfMeasure"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="sec"/&gt;
 *     &lt;enumeration value="min"/&gt;
 *     &lt;enumeration value="hr"/&gt;
 *     &lt;enumeration value="days"/&gt;
 *     &lt;enumeration value="hours"/&gt;
 *     &lt;enumeration value="minutes"/&gt;
 *     &lt;enumeration value="seconds"/&gt;
 *     &lt;enumeration value="milliseconds"/&gt;
 *     &lt;enumeration value="microseconds"/&gt;
 *     &lt;enumeration value="nanoseconds"/&gt;
 *     &lt;enumeration value="picoseconds"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "TimeUnitOfMeasure")
@XmlEnum
public enum TimeUnitOfMeasure {

    @XmlEnumValue("sec")
    SEC("sec"),
    @XmlEnumValue("min")
    MIN("min"),
    @XmlEnumValue("hr")
    HR("hr"),
    @XmlEnumValue("days")
    DAYS("days"),
    @XmlEnumValue("hours")
    HOURS("hours"),
    @XmlEnumValue("minutes")
    MINUTES("minutes"),
    @XmlEnumValue("seconds")
    SECONDS("seconds"),
    @XmlEnumValue("milliseconds")
    MILLISECONDS("milliseconds"),
    @XmlEnumValue("microseconds")
    MICROSECONDS("microseconds"),
    @XmlEnumValue("nanoseconds")
    NANOSECONDS("nanoseconds"),
    @XmlEnumValue("picoseconds")
    PICOSECONDS("picoseconds");
    private final String value;

    TimeUnitOfMeasure(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TimeUnitOfMeasure fromValue(String v) {
        for (TimeUnitOfMeasure c: TimeUnitOfMeasure.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}

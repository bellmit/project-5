


drs {
  hadoop {
    conf = "/home/servicedesk"
    #conf = "/home/arthur"
  }
  firefox{
    driver = "/home/servicedesk/driver/geckodriver"
    #driver = "/home/arthur/Downloads/geckodriver"
  }
  amazon{
    eurptpath ="/home/servicedesk/amazon_eu_rpt_temp/"
    narptpath ="/home/servicedesk/amazon_rpt_temp/"

    #eurptpath ="/home/arthur/amazon_eu_rpt_temp/"
    #narptpath ="/home/arthur/amazon_rpt_temp/"
  }


}



# Load using SlickSession.forConfig("slick-postgres")
slick-postgres {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    dataSourceClass = "slick.jdbc.DriverDataSource"
    properties = {
      driver = "org.postgresql.Driver"
      url = "jdbc:postgresql://drs.crghoygbfshk.ap-northeast-1.rds.amazonaws.com:5432/drs?assumeMinServerVersion=9.0"
      #url = "jdbc:postgresql://localhost:5432/drs"
      user = drs
      password = "phi42PrlGo6p"
    }
    queueSize = 10000
    maxConnections = 10
    numThreads = 2
  }
}


akka {

    loglevel = "DEBUG"
    #loglevel = "INFO"
    stdout-loglevel = "INFO"
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

    actor.debug.autoreceive = on
    actor.debug.lifecycle = on


  quartz {
    //defaultTimezone = "Asia/Taipei"
    //UTC
    schedules {

      cronRefreshAllOrders {
        expression = "0 3,18,28,33,38,43,48,53,58 * ? * *"
      }
      cronRefreshMissingAllOrders {
        expression = "0 1,11,21,31,41,51 * ? * *"
      }
      cronRefreshNotUpdatedOrders {
        expression = "0 8 * ? * *"
      }
      cronDailySales {
        expression = "0 59 * ? * *"
      }
      cronGenerateRemittance {
        expression = "0 0 12 ? * SAT"
      }
      cronReqAmzOrderNA {
        expression = "0 0,5,15,25,30,35,40,45,50,55 * ? * *"
      }

      cronReqAmzOrderEU {
        expression = "0 0,5,15,25,30,35,40,45,50,55 * ? * *"
      }

      cronReqFAmzOrderNA {
        expression = "0 0,5,15,25,30,35,40,45,50,55 * ? * *"
      }

      cronReqFAmzOrderUK {
        expression = "0 0,5,15,25,30,35,40,45,50,55 * ? * *"
      }

      cronReqShopifyOrder {
        expression = "0 0,5,15,25,30,35,40,45,50,55 * ? * *"
      }

      cronLoadProductData {
         expression = "0 6,16,26,36,46,56 * ? * *"
      }

      cronLoadProductRetailPrice {
         expression = "0 15,30,45 * ? * *"
      }


    }
  }

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"

      allow-java-serialization = on

      serializers {
        java = "akka.serialization.JavaSerializer"
      }

      serialization-bindings {
        "java.lang.String" = java
      }

    }

  remote.artery {
    canonical {
      hostname = "localhost"
      port = 5003
    }
    advanced {
      maximum-frame-size = 1024KiB
      buffer-pool-size = 128
      maximum-large-frame-size = 4MiB
      large-buffer-pool-size = 32
    }
  }

  cluster {
    seed-nodes = [
     # "akka.tcp://drsDP@10.0.0.243:2551",
    #  "akka.tcp://drsDP@10.0.0.246:2551"]
    #"akka.tcp://ClusterSystem@192.168.0.127:2551",
      "akka://drs@localhost:5001"]
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
     # auto-down-unreachable-after = 10s
    }
}





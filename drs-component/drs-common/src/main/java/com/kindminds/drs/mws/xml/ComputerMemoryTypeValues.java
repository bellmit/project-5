//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.06.10 at 11:40:51 PM CST 
//


package com.kindminds.drs.mws.xml;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ComputerMemoryTypeValues.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ComputerMemoryTypeValues"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="72_pin_edo_simm"/&gt;
 *     &lt;enumeration value="ddr2_sdram"/&gt;
 *     &lt;enumeration value="ddr3_sdram"/&gt;
 *     &lt;enumeration value="ddr4_sdram"/&gt;
 *     &lt;enumeration value="ddr_dram"/&gt;
 *     &lt;enumeration value="ddr_sdram"/&gt;
 *     &lt;enumeration value="dimm"/&gt;
 *     &lt;enumeration value="dram"/&gt;
 *     &lt;enumeration value="edo_dram"/&gt;
 *     &lt;enumeration value="eeprom"/&gt;
 *     &lt;enumeration value="eprom"/&gt;
 *     &lt;enumeration value="fpm_dram"/&gt;
 *     &lt;enumeration value="fpm_ram"/&gt;
 *     &lt;enumeration value="l2_cache"/&gt;
 *     &lt;enumeration value="micro_dimm"/&gt;
 *     &lt;enumeration value="pc2_4200"/&gt;
 *     &lt;enumeration value="pc2_4300"/&gt;
 *     &lt;enumeration value="pc2_5300"/&gt;
 *     &lt;enumeration value="pc2_5400"/&gt;
 *     &lt;enumeration value="pc2_6000"/&gt;
 *     &lt;enumeration value="pc_100_sdram"/&gt;
 *     &lt;enumeration value="pc_1066"/&gt;
 *     &lt;enumeration value="pc_133_sdram"/&gt;
 *     &lt;enumeration value="pc_1600"/&gt;
 *     &lt;enumeration value="pc_2100_ddr"/&gt;
 *     &lt;enumeration value="pc_2700_ddr"/&gt;
 *     &lt;enumeration value="pc_3000"/&gt;
 *     &lt;enumeration value="pc_3200_ddr"/&gt;
 *     &lt;enumeration value="pc_3500_ddr"/&gt;
 *     &lt;enumeration value="pc_3700"/&gt;
 *     &lt;enumeration value="pc_4000_ddr"/&gt;
 *     &lt;enumeration value="pc_4200"/&gt;
 *     &lt;enumeration value="pc_4300"/&gt;
 *     &lt;enumeration value="pc_4400"/&gt;
 *     &lt;enumeration value="pc_66_sdram"/&gt;
 *     &lt;enumeration value="pc_800"/&gt;
 *     &lt;enumeration value="rambus"/&gt;
 *     &lt;enumeration value="rdram"/&gt;
 *     &lt;enumeration value="rimm"/&gt;
 *     &lt;enumeration value="sdram"/&gt;
 *     &lt;enumeration value="sgram"/&gt;
 *     &lt;enumeration value="simm"/&gt;
 *     &lt;enumeration value="sipp"/&gt;
 *     &lt;enumeration value="sldram"/&gt;
 *     &lt;enumeration value="sodimm"/&gt;
 *     &lt;enumeration value="sorimm"/&gt;
 *     &lt;enumeration value="sram"/&gt;
 *     &lt;enumeration value="unknown"/&gt;
 *     &lt;enumeration value="vram"/&gt;
 *     &lt;enumeration value="wram"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "ComputerMemoryTypeValues")
@XmlEnum
public enum ComputerMemoryTypeValues {

    @XmlEnumValue("72_pin_edo_simm")
    VALUE_1("72_pin_edo_simm"),
    @XmlEnumValue("ddr2_sdram")
    VALUE_2("ddr2_sdram"),
    @XmlEnumValue("ddr3_sdram")
    VALUE_3("ddr3_sdram"),
    @XmlEnumValue("ddr4_sdram")
    VALUE_4("ddr4_sdram"),
    @XmlEnumValue("ddr_dram")
    VALUE_5("ddr_dram"),
    @XmlEnumValue("ddr_sdram")
    VALUE_6("ddr_sdram"),
    @XmlEnumValue("dimm")
    VALUE_7("dimm"),
    @XmlEnumValue("dram")
    VALUE_8("dram"),
    @XmlEnumValue("edo_dram")
    VALUE_9("edo_dram"),
    @XmlEnumValue("eeprom")
    VALUE_10("eeprom"),
    @XmlEnumValue("eprom")
    VALUE_11("eprom"),
    @XmlEnumValue("fpm_dram")
    VALUE_12("fpm_dram"),
    @XmlEnumValue("fpm_ram")
    VALUE_13("fpm_ram"),
    @XmlEnumValue("l2_cache")
    VALUE_14("l2_cache"),
    @XmlEnumValue("micro_dimm")
    VALUE_15("micro_dimm"),
    @XmlEnumValue("pc2_4200")
    VALUE_16("pc2_4200"),
    @XmlEnumValue("pc2_4300")
    VALUE_17("pc2_4300"),
    @XmlEnumValue("pc2_5300")
    VALUE_18("pc2_5300"),
    @XmlEnumValue("pc2_5400")
    VALUE_19("pc2_5400"),
    @XmlEnumValue("pc2_6000")
    VALUE_20("pc2_6000"),
    @XmlEnumValue("pc_100_sdram")
    VALUE_21("pc_100_sdram"),
    @XmlEnumValue("pc_1066")
    VALUE_22("pc_1066"),
    @XmlEnumValue("pc_133_sdram")
    VALUE_23("pc_133_sdram"),
    @XmlEnumValue("pc_1600")
    VALUE_24("pc_1600"),
    @XmlEnumValue("pc_2100_ddr")
    VALUE_25("pc_2100_ddr"),
    @XmlEnumValue("pc_2700_ddr")
    VALUE_26("pc_2700_ddr"),
    @XmlEnumValue("pc_3000")
    VALUE_27("pc_3000"),
    @XmlEnumValue("pc_3200_ddr")
    VALUE_28("pc_3200_ddr"),
    @XmlEnumValue("pc_3500_ddr")
    VALUE_29("pc_3500_ddr"),
    @XmlEnumValue("pc_3700")
    VALUE_30("pc_3700"),
    @XmlEnumValue("pc_4000_ddr")
    VALUE_31("pc_4000_ddr"),
    @XmlEnumValue("pc_4200")
    VALUE_32("pc_4200"),
    @XmlEnumValue("pc_4300")
    VALUE_33("pc_4300"),
    @XmlEnumValue("pc_4400")
    VALUE_34("pc_4400"),
    @XmlEnumValue("pc_66_sdram")
    VALUE_35("pc_66_sdram"),
    @XmlEnumValue("pc_800")
    VALUE_36("pc_800"),
    @XmlEnumValue("rambus")
    VALUE_37("rambus"),
    @XmlEnumValue("rdram")
    VALUE_38("rdram"),
    @XmlEnumValue("rimm")
    VALUE_39("rimm"),
    @XmlEnumValue("sdram")
    VALUE_40("sdram"),
    @XmlEnumValue("sgram")
    VALUE_41("sgram"),
    @XmlEnumValue("simm")
    VALUE_42("simm"),
    @XmlEnumValue("sipp")
    VALUE_43("sipp"),
    @XmlEnumValue("sldram")
    VALUE_44("sldram"),
    @XmlEnumValue("sodimm")
    VALUE_45("sodimm"),
    @XmlEnumValue("sorimm")
    VALUE_46("sorimm"),
    @XmlEnumValue("sram")
    VALUE_47("sram"),
    @XmlEnumValue("unknown")
    VALUE_48("unknown"),
    @XmlEnumValue("vram")
    VALUE_49("vram"),
    @XmlEnumValue("wram")
    VALUE_50("wram");
    private final String value;

    ComputerMemoryTypeValues(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ComputerMemoryTypeValues fromValue(String v) {
        for (ComputerMemoryTypeValues c: ComputerMemoryTypeValues.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}

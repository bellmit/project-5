//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.06.10 at 11:40:51 PM CST 
//


package com.kindminds.drs.mws.xml;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for LengthUnitOfMeasure.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="LengthUnitOfMeasure"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="MM"/&gt;
 *     &lt;enumeration value="CM"/&gt;
 *     &lt;enumeration value="M"/&gt;
 *     &lt;enumeration value="IN"/&gt;
 *     &lt;enumeration value="FT"/&gt;
 *     &lt;enumeration value="inches"/&gt;
 *     &lt;enumeration value="feet"/&gt;
 *     &lt;enumeration value="meters"/&gt;
 *     &lt;enumeration value="decimeters"/&gt;
 *     &lt;enumeration value="centimeters"/&gt;
 *     &lt;enumeration value="millimeters"/&gt;
 *     &lt;enumeration value="micrometers"/&gt;
 *     &lt;enumeration value="nanometers"/&gt;
 *     &lt;enumeration value="picometers"/&gt;
 *     &lt;enumeration value="hundredths_inches"/&gt;
 *     &lt;enumeration value="yards"/&gt;
 *     &lt;enumeration value="angstrom"/&gt;
 *     &lt;enumeration value="mils"/&gt;
 *     &lt;enumeration value="miles"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "LengthUnitOfMeasure")
@XmlEnum
public enum LengthUnitOfMeasure {

    MM("MM"),
    CM("CM"),
    M("M"),
    IN("IN"),
    FT("FT"),
    @XmlEnumValue("inches")
    INCHES("inches"),
    @XmlEnumValue("feet")
    FEET("feet"),
    @XmlEnumValue("meters")
    METERS("meters"),
    @XmlEnumValue("decimeters")
    DECIMETERS("decimeters"),
    @XmlEnumValue("centimeters")
    CENTIMETERS("centimeters"),
    @XmlEnumValue("millimeters")
    MILLIMETERS("millimeters"),
    @XmlEnumValue("micrometers")
    MICROMETERS("micrometers"),
    @XmlEnumValue("nanometers")
    NANOMETERS("nanometers"),
    @XmlEnumValue("picometers")
    PICOMETERS("picometers"),
    @XmlEnumValue("hundredths_inches")
    HUNDREDTHS___INCHES("hundredths_inches"),
    @XmlEnumValue("yards")
    YARDS("yards"),
    @XmlEnumValue("angstrom")
    ANGSTROM("angstrom"),
    @XmlEnumValue("mils")
    MILS("mils"),
    @XmlEnumValue("miles")
    MILES("miles");
    private final String value;

    LengthUnitOfMeasure(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static LengthUnitOfMeasure fromValue(String v) {
        for (LengthUnitOfMeasure c: LengthUnitOfMeasure.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
